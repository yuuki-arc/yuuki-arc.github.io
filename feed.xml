<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuukiar.co</title>
  <id>http://yuukiar.co/blog</id>
  <link href="http://yuukiar.co/"/>
  <link href="http://yuukiar.co/feed.xml" rel="self"/>
  <updated>2015-06-15T03:00:00+09:00</updated>
  <entry>
    <title>Mac OS X Yosemiteでwaifu2xをインストールして使えるようにする</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/06/15/setup-waifu2x-on-mac/"/>
    <id>http://yuukiar.co/blog/2015/06/15/setup-waifu2x-on-mac/</id>
    <published>2015-06-15T03:00:00+09:00</published>
    <updated>2015-06-15T03:29:29+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;最近スマホゲームの素材探しをしていてその過程でwaifu2xというツールを知ったのですが、
素材加工のクオリティアップにかなり使えそうなのでセットアップ方法を残しておきます。&lt;/p&gt;

&lt;p&gt;細かい説明はいろんなところで紹介されているのでここで説明しませんが、
簡単にいうと、waifu2xとは二次元画像を綺麗に拡大できるツールです。&lt;/p&gt;

&lt;p&gt;自分の環境がMac OS X Yosemiteなので、Macでのセットアップ方法を探していたのですが、
見当たらなかったので、自分でセットアップした手順について書いていきます。
waifu2xは最近のトレンドのようで派生版があちこちにあるのですが、
いくつかMacで動いたのでそれらのセットアップ手順を紹介します。&lt;/p&gt;

&lt;h3 id="見出し"&gt;見出し&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#この記事のwaifu2xについて"&gt;この記事のwaifu2xについて&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#この記事で扱うwaifu2x"&gt;この記事で扱うwaifu2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#この記事では扱わないが気になるwaifu2x"&gt;この記事では扱わないが気になるwaifu2x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1.-ライブラリのインストール"&gt;1. ライブラリのインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2.-waifu2x(cui版)のセットアップ"&gt;2. waifu2x(CUI版)のセットアップ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#waifu2x-converter-glsl-(ueshita)"&gt;waifu2x-converter-glsl (ueshita)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#waifu2x-converter-cpp-(wl-amigo)"&gt;waifu2x-converter-cpp (WL-Amigo)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3.-waifu2x(gui版)のセットアップ"&gt;3. waifu2x(GUI版)のセットアップ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#waifu2x-converter-qt-(khws4v1)"&gt;waifu2x-converter-qt (khws4v1)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="この記事のwaifu2xについて"&gt;この記事のwaifu2xについて&lt;/h2&gt;

&lt;h3 id="この記事で扱うwaifu2x"&gt;この記事で扱うwaifu2x&lt;/h3&gt;

&lt;p&gt;コマンドラインで使える派生版を２つと、それをフロントエンドで使えるGUIを１つ紹介します。&lt;br&gt;
結論から書くと、今のところはコマンドラインで &lt;strong&gt;waifu2x-converter-glsl&lt;/strong&gt; を使っていて、フロントエンドに &lt;strong&gt;waifu2x-converter-qt&lt;/strong&gt; を使ってます。
フロントエンド側からは &lt;strong&gt;waifu2x-converter-glsl&lt;/strong&gt; へのパスを設定してそれを使うようにします。&lt;/p&gt;

&lt;p&gt;ただ、コマンドラインのほうは少々使いづらいです。
本来、パスを通せばどのディレクトリからでも実行できるようになってほしいのですが、
作業ディレクトリに依存している箇所があるため、実行するときはwaifu2x-converter-glslのディレクトリから実行しないとエラーになります。
このあたりはきちんと解決してから記事にしたかったのですが&amp;hellip;あまり時間かけたくないので今のところはこれで我慢します。&lt;/p&gt;

&lt;p&gt;それと、今後の他ツールの動向によっては変えていくこともあるかと思います。&lt;/p&gt;

&lt;h4 id="cui"&gt;CUI&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ueshita/waifu2x-converter-glsl"&gt;ueshita/waifu2x-converter-glsl - GitHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;OpenGLで動かせるようにしたバージョン。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WL-Amigo/waifu2x-converter-cpp"&gt;WL-Amigo/waifu2x-converter-cpp - GitHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;オリジナル版をC++で書きなおしたバージョン。更新はもうされないそうです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="gui"&gt;GUI&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/khws4v1/waifu2x-converter-qt"&gt;khws4v1/waifu2x-converter-qt - GitHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Macでも動かせるフロントエンドツール。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://khws4v1.myhome.cx/article/2015/06/07/waifu2x-converter-qt%E3%81%AE%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E9%85%8D%E5%B8%83/"&gt;waifu2x-converter-qtのバイナリ配布 | かひわし4v1.memo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://khws4v1.myhome.cx/article/2015/06/01/waifu2x-converter-qt_linux_x64/"&gt;waifu2x-converter-cppのGUIフロントエンド”waifu2x-converter-qt”のバイナリを公開しました※ | かひわし4v1.memo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="この記事では扱わないが気になるwaifu2x"&gt;この記事では扱わないが気になるwaifu2x&lt;/h3&gt;

&lt;p&gt;ここでは扱いませんが、個人的にここはチェックしておきたいなというものを書いておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://waifu2x.udp.jp/"&gt;http://waifu2x.udp.jp/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Webから使える。気になるというか、これでwaifu2xを知ったので。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nagadomi/waifu2x"&gt;nagadomi/waifu2x - GitHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;waifu2xのオリジナル。luaで書かれているようです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tanakamura/waifu2x-converter-cpp"&gt;tanakamura/waifu2x-converter-cpp&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;現状いちばん頻繁に更新されてるので追っていきたいところですが、
コード見るとWindowsとLinuxにしか対応してない箇所があって、そのままだとコンパイルエラーで通りませんでした。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://d.hatena.ne.jp/w_o/20150602#1433229756"&gt;waifu2x はやくした - J&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lltcggie/waifu2x-caffe"&gt;lltcggie/waifu2x-caffe - GitHub&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;GUIとCUI両方使えて機能も豊富な模様。&lt;br&gt;
Caffeというフレームワーク（？）で実装されていてMacでも使えるようですが、開発環境を整えるのが面倒だったので今のところ何もしてません。
でもよさそうなのでMacで使ってみたいですね。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="1.-ライブラリのインストール"&gt;1. ライブラリのインストール&lt;/h2&gt;

&lt;p&gt;セットアップに入っていきます。  &lt;/p&gt;

&lt;p&gt;ライブラリのインストールにはHomebrewとgitを使います。
また この後インストールする waifu2x-converter-glsl のソースビルドにXCodeを使用します。
もしこれらが入っていなければ、他のサイトなどを参考にしてインストールしてください。&lt;/p&gt;

&lt;p&gt;今回必要になるOpenCVとOpenGLのライブラリをインストールしていきます。
バージョンは現時点（2015年6月15日）の最新版であるOpenGL3.1.1とOpenCV3.0.0で、
両方ともHomebrewからインストールします。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;brew tap homebrew/science
&lt;span class="gp"&gt;$ &lt;/span&gt;brew install opencv3 --with-opengl --with-qt5 --with-tbb --c++11
&lt;span class="gp"&gt;$ &lt;/span&gt;brew link --force opencv3

&lt;span class="gp"&gt;$ &lt;/span&gt;brew install glfw3 --universal
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;brew install するのは opencv ではなく opencv3&lt;/strong&gt; である点に注意してください。（opencvを指定するとOpenCV2系のバージョンが入ります）&lt;/li&gt;
&lt;li&gt;opencv3の &lt;code&gt;--with-qt5&lt;/code&gt; はフロントエンドの方で必要になります。
他のオプションは必要そうなのを入れてますが、いらないものもあるかもしれません。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--force&lt;/code&gt;でリンクするのは、opencv3の場合は自動的に &lt;code&gt;/usr/local/..&lt;/code&gt; にシンボリックリンクがはられないためです。
このオプションを指定すると強制的にOpenCV3へのリンクがはられるので、すでに同ディレクトリにOpenCVが入っている人は実行しないほうがいいです。
ただし、その場合はXCodeプロジェクトで設定されているパスを書き換えないといけないです。（その場合のパターンはここでは説明しません）&lt;br&gt;&lt;/li&gt;
&lt;li&gt;glfw3の &lt;code&gt;--universal&lt;/code&gt; はスタティックライブラリを生成するオプションで、
waifu2x-converter-glsl のXCodeプロジェクトで指定してるので、インストールと同時に生成しておきます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="2.-waifu2x(cui版)のセットアップ"&gt;2. waifu2x(CUI版)のセットアップ&lt;/h2&gt;

&lt;p&gt;ここでは２つの派生版についてセットアップ手順を書いていきます。
waifu2xを使うにはどちらか1つセットアップできてればいいので、どちらか使いたい方を見てください。
簡単に違いを説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;waifu2x-converter-glsl (ueshita)

&lt;ul&gt;
&lt;li&gt;GPUを使うので実行中はグラフィックまわりの処理に負荷がかかる&lt;/li&gt;
&lt;li&gt;waifu2x-converter-cpp(WL-Amigo)に比べて処理速度が速い&lt;/li&gt;
&lt;li&gt;XCodeを使ったビルドでセットアップ手順が少々煩雑&lt;/li&gt;
&lt;li&gt;実行するときのカレントディレクトリはインストール場所固定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;waifu2x-converter-cpp (WL-Amigo)

&lt;ul&gt;
&lt;li&gt;CPUを使うので実行中は全体的に重くなる&lt;/li&gt;
&lt;li&gt;waifu2x-converter-glslに比べて処理速度が遅い&lt;/li&gt;
&lt;li&gt;CMakeを使ったビルドでモノが揃ってれば手順が簡単&lt;/li&gt;
&lt;li&gt;パスを通せば、実行するときのカレントディレクトリは任意（※オプション指定が必要）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じです。 
処理速度はだいぶ違ってて、waifu2x-converter-glslのほうが目に見えて速いです。&lt;/p&gt;

&lt;h3 id="waifu2x-converter-glsl-(ueshita)"&gt;waifu2x-converter-glsl (ueshita)&lt;/h3&gt;

&lt;p&gt;まずOpenGL版のほうから説明していきます。&lt;/p&gt;

&lt;p&gt;git cloneしてディレクトリに移動します。&lt;br&gt;
以降、このディレクトリでコマンドを入力していきます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git clone https://github.com/ueshita/waifu2x-converter-glsl
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;git cloneしたディレクトリ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合は下記の場所にインストールしたのでそのディレクトリに移動してます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/Users/hoge/src/github.com/ueshita/waifu2x-converter-glsl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にXCodeでビルドしていきます。&lt;br&gt;
XCodeのプロジェクトは作者の方がリポジトリに含めてくれているので、それを使います。&lt;/p&gt;

&lt;p&gt;まず、ビルドする前に一回XCodeのアプリケーションを起動してプロジェクトを開きます。
そうしないとコマンドラインからのビルドでエラーになるからで、それを回避するためです。
プロジェクトのワークスペースがないといけないのですが、XCodeを起動すると作られるようです。&lt;/p&gt;

&lt;p&gt;マウスでアプリケーションを指定してプロジェクトを開いてもいいですし、
コマンドラインから以下のように実行することでも起動できます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;open build/waifu2x-converter-glsl.xcodeproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ワークスペースを作るためだけに開くので、起動したらすぐに終了していいです。&lt;/p&gt;

&lt;p&gt;次のコマンドを実行するとXCodeでソースビルドを行います。
オプションのパラメータをわかりやすくするため、&lt;code&gt;\&lt;/code&gt;で行を区切ってますが1行でもOKです。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;xcodebuild &lt;span class="se"&gt;\&lt;/span&gt;
-project build/waifu2x-converter-glsl.xcodeproj &lt;span class="se"&gt;\&lt;/span&gt;
-scheme waifu2x-converter-glsl &lt;span class="se"&gt;\&lt;/span&gt;
-configuration Release &lt;span class="se"&gt;\&lt;/span&gt;
-derivedDataPath DerivedData
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに、もしここで以下のエラーが表示されたらワークスペースが作られてませんので、
XCodeを起動してプロジェクトを開いてください。（一つ前に書いた作業のことです）&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;xcodebuild: error: &lt;span class="s1"&gt;'build/waifu2x-converter-glsl.xcodeproj'&lt;/span&gt; does not exist.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-derivedDataPath&lt;/code&gt; で指定しているのがリリースバイナリが作られるディレクトリです。
このディレクトリに作られるファイルを起動出来る場所にコピーします。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cp DerivedData/Build/Products/Release/waifu2x-converter-glsl .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで waifu2x-converter-glsl のセットアップは完了です。
ちなみにこのときの構成は以下のようになっています。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/Users/hoge/src/github.com/ueshita/waifu2x-converter-glsl

&lt;span class="gp"&gt;$ &lt;/span&gt;tree -pugL 1
.
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  DerivedData
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  LICENSE
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  README.md
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  build
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  include
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  models
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  shaders
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  src
└── &lt;span class="o"&gt;[&lt;/span&gt;-rwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  waifu2x-converter-glsl

6 directories, 3 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このディレクトリからファイルを実行することでwaifu2xが使えるようになります。&lt;/p&gt;

&lt;p&gt;ただし、ここで注意点があります。&lt;br&gt;
最初に書きましたが、これで使えるコマンドラインのほうは少々使いづらいです。
理由は、実行するときはこのwaifu2x-converter-glslのディレクトリに移動してから実行しないと使えないからです。&lt;/p&gt;

&lt;p&gt;作業ディレクトリに依存しているのは &lt;code&gt;models&lt;/code&gt; と &lt;code&gt;shaders&lt;/code&gt; にあるモジュールです。
このうち、 &lt;code&gt;models&lt;/code&gt; に関してはwaifu2x-converter-glslのオプションに &lt;code&gt;--model_dir&lt;/code&gt; というのがあり、
ここでパスを指定することで回避できますが、 &lt;code&gt;shaders&lt;/code&gt; に関しては同様のオプションがありません。
なので作者の方にお願いするか、githubで公開されてるのでコードを修正してプルリクするなりしないといけないです。
時間があれば見てみようかなと思いましたが、そこまで手が回らなかったので今のところこのままにしてます。&lt;/p&gt;

&lt;p&gt;この問題に関してはインプット側の画像パスをフルパスにすればいいだけなので、
少々不便ではありますがこれでも十分使えるかなと思ってます。&lt;/p&gt;

&lt;p&gt;また、GUI版をインストールして waifu2x-converter-glsl を使うようにすれば
この問題は関係なくなるので、GUI版メインで使う人は気にしなくていいです。&lt;/p&gt;

&lt;h4 id="実行方法（例）"&gt;実行方法（例）&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~/src/github.com/ueshita/waifu2x-converter-glsl
$ waifu2x-converter-glsl -i ~/Documents/test.jpg -m noise_scale -j 8 --scale_ratio 2.0 --noise_level 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="実行結果"&gt;実行結果&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Noise reduction (Lv.2) filtering...
split blocks 2x3 ...
process block (1,1) ...
[=======] ok
:
process block (6,4) ...
[=======] ok
process successfully done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="waifu2x-converter-cpp-(wl-amigo)"&gt;waifu2x-converter-cpp (WL-Amigo)&lt;/h3&gt;

&lt;p&gt;次に、他の派生版としてwaifu2x-converter-cpp(WL-Amigo)版もセットアップしてみます。&lt;/p&gt;

&lt;p&gt;こちらもまずはgit cloneしてディレクトリを移動します。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git clone https://github.com/WL-Amigo/waifu2x-converter-cpp
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;git cloneしたディレクトリ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合は下記の場所にインストールしたのでそのディレクトリに移動してます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/Users/hoge/src/github.com/WL-Amigo/waifu2x-converter-cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カレントディレクトリに &lt;code&gt;CMakeLists.txt&lt;/code&gt; のファイルを作って、以下の内容を貼り付けます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cmake_minimum_required&lt;span class="o"&gt;(&lt;/span&gt;VERSION 2.8&lt;span class="o"&gt;)&lt;/span&gt;

project&lt;span class="o"&gt;(&lt;/span&gt;waifu2x-converter-cpp CXX&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;CMAKE_CXX_FLAGS &lt;span class="s2"&gt;"-std=c++11 -stdlib=libc++"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;OpenCV_DIR &lt;span class="s2"&gt;"/usr/local/opt/opencv3/share/OpenCV"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;OpenCV_CONFIG_PATH &lt;span class="s2"&gt;"/usr/local/opt/opencv3/share/OpenCV"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;OpenCV_INSTALL_PATH &lt;span class="s2"&gt;"/usr/local/opt/opencv3"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
find_package&lt;span class="o"&gt;(&lt;/span&gt;OpenCV REQUIRED&lt;span class="o"&gt;)&lt;/span&gt;
include_directories&lt;span class="o"&gt;(&lt;/span&gt;include &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OpenCV_INCLUDE_DIRS&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

add_executable&lt;span class="o"&gt;(&lt;/span&gt;waifu2x-converter-cpp src/main.cpp src/modelHandler.cpp src/convertRoutine.cpp&lt;span class="o"&gt;)&lt;/span&gt;
target_link_libraries&lt;span class="o"&gt;(&lt;/span&gt;waifu2x-converter-cpp &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OpenCV_LIBS&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Homebrewの場合、OpenCVのライブラリは &lt;code&gt;/usr/local/opt/&lt;/code&gt; 配下にシンボリックリンクで作られるので、
その場所を指定します。
cmakeはあまり詳しくないので最適な書き方ではないかもしれませんが、私の場合はこれでいけました。&lt;/p&gt;

&lt;p&gt;準備出来たのであとはコマンドを打つだけです。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;cmake .
&lt;span class="gp"&gt;$ &lt;/span&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで以下のように、
カレントディレクトリに &lt;code&gt;waifu2x-converter-cpp&lt;/code&gt; というファイルが生成されていれば成功です。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;
/Users/hoge/src/github.com/WL-Amigo/waifu2x-converter-cpp

&lt;span class="gp"&gt;$ &lt;/span&gt;tree -pugL 1
.
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  CMakeCache.txt
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  CMakeFiles
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  CMakeLists.txt
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  LICENSE
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  Makefile
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  README.md
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  appendix
├── &lt;span class="o"&gt;[&lt;/span&gt;-rw-r--r-- hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  cmake_install.cmake
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  include
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  models
├── &lt;span class="o"&gt;[&lt;/span&gt;drwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  src
└── &lt;span class="o"&gt;[&lt;/span&gt;-rwxr-xr-x hoge   staff   &lt;span class="o"&gt;]&lt;/span&gt;  waifu2x-converter-cpp

5 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとはこのディレクトリに対してパスを通せば、どこからでも実行できるようになります。&lt;/p&gt;

&lt;h4 id="実行方法（例）"&gt;実行方法（例）&lt;/h4&gt;

&lt;p&gt;パスを通した場合、任意の位置で実行することができます。
ただし、 &lt;code&gt;--model_dir&lt;/code&gt;のオプションで &lt;code&gt;models&lt;/code&gt; ディレクトリのパスを指定する必要は出てきます。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;waifu2x-converter-cpp --model_dir ~/src/github.com/WL-Amigo/waifu2x-converter-cpp/models -i ~/Documents/test-cpp.jpg -m noise_scale -j 8 --scale_ratio 1.2 --noise_level 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パスを通さない場合は、waifu2x-converter-glslと同じ書き方になります。
その代わり、 &lt;code&gt;--model_dir&lt;/code&gt; のオプションを指定しなくてもよくなります。&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/src/github.com/WL-Amigo/waifu2x-converter-cpp/
&lt;span class="gp"&gt;$ &lt;/span&gt;waifu2x-converter-cpp -i ~/Documents/test-cpp.jpg -m noise_scale -j 8 --scale_ratio 1.2 --noise_level 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="実行結果"&gt;実行結果&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start process block (0,0) ...
Iteration #1...
Iteration #2...
:
Iteration #6...
Iteration #7...
process successfully done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="3.-waifu2x(gui版)のセットアップ"&gt;3. waifu2x(GUI版)のセットアップ&lt;/h2&gt;

&lt;h3 id="waifu2x-converter-qt-(khws4v1)"&gt;waifu2x-converter-qt (khws4v1)&lt;/h3&gt;

&lt;p&gt;GUI版のwaifu2xをセットアップです。&lt;br&gt;
Mac用のパッケージがリポジトリにあるのでそれを使います。&lt;br&gt;
&lt;a href="https://github.com/khws4v1/waifu2x-converter-qt/releases"&gt;https://github.com/khws4v1/waifu2x-converter-qt/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;waifu2x-converter-qt_Mac.dmg というファイル名のリンクがあるので、クリックしてダウンロードしてください。
ダウンロードしたファイルを展開すると &lt;strong&gt;waifu2x-converter-qt.app&lt;/strong&gt; というファイルがあるので、
Applicationフォルダなど適当な場所においてください。&lt;/p&gt;

&lt;p&gt;アプリケーションを起動すると以下の様なウィンドウが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="waifu2x-converter-qt フィルタ選択" src="/img/2015-06-15/waifu2x-converter-qt.png" /&gt;&lt;/p&gt;

&lt;p&gt;この派生版にもwaifu2xが内蔵されていますが、私の環境では下記のエラーで動きませんでした。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dyld: Library not loaded: /opt/local/lib/libgstbase-1.0.0.dylib` 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このエラーを調査してもいいですが、すでにコマンドラインで実行できる環境があるのでそちらを利用することにします。&lt;/p&gt;

&lt;p&gt;ということで、設定画面を開きます。
上部にあるメニューの「ツール」を選択して「設定」をクリックすると、次の設定ダイアログが開きます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="waifu2x-converter-qt 設定" src="/img/2015-06-15/settings.png" /&gt;&lt;/p&gt;

&lt;p&gt;一つ目の入力欄の&lt;strong&gt;waifu2xの場所&lt;/strong&gt; に、先ほどインストールしたコマンドラインのフルパスを入力してください。
私の環境であれば、それぞれ以下のように入れます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;waifu2x-converter-glsl&lt;/strong&gt; を使う場合

&lt;ul&gt;
&lt;li&gt;/Users/hoge/src/github.com/ueshita/waifu2x-converter-glsl/waifu2x-converter-glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;waifu2x-converter-cpp&lt;/strong&gt; を使う場合

&lt;ul&gt;
&lt;li&gt;/Users/hoge/src/github.com/WL-Amigo/waifu2x-converter-cpp/waifu2x-converter-cpp&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OKボタンを押すと設定が反映されます。&lt;br&gt;
これで準備が整いました。
画像を選択して実行すると、ダイアログがポップアップして処理結果が表示されます。&lt;/p&gt;

&lt;p&gt;&lt;img alt="waifu2x-converter-qt 処理結果" src="/img/2015-06-15/exec_result.png" /&gt;&lt;/p&gt;

&lt;p&gt;これでGUIでwaifu2xが使えるようになりました。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「Global Game Jam 2015」に参加しました／DEAD EYE LANDの体験コーナーあります</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/05/30/global-game-jam-2015/"/>
    <id>http://yuukiar.co/blog/2015/05/30/global-game-jam-2015/</id>
    <published>2015-05-30T13:20:00+09:00</published>
    <updated>2015-05-31T23:28:36+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img alt="DEAD EYE LAND" src="/img/2015-05-30/dead_eye_land_ggj2015_.png" /&gt;&lt;/p&gt;

&lt;p&gt;1月23日(金)〜25日(日)にかけて、&lt;a href="http://globalgamejam.org/"&gt;Global Game Jam 2015&lt;/a&gt; (GGJ2015) に参加してきました。
世界中でゲーム開発を行うイベントで、チームを組んで１つのテーマについて企画から考えてゲームを作るイベントです。&lt;/p&gt;

&lt;p&gt;ということで、書きかけのまま公開せずに4ヶ月経ってしまったんですが、
GGJで視線入力ハードウェアのTobii EyeXを使ったアイトラッキングゲーム &amp;ldquo;&lt;strong&gt;DEAD EYE LAND&lt;/strong&gt;&amp;rdquo; を作りまして、
それがGGJ以降も好評のようなのでその紹介も含めて書きます。&lt;/p&gt;

&lt;h2 id="tobii-eyex体験コーナー"&gt;Tobii EyeX体験コーナー&lt;/h2&gt;

&lt;p&gt;4月17日からマウスコンピューターのダイレクトショップ「G-Tune:Garage 秋葉原店／名古屋店」の2箇所で体験できるようになってます。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.g-tune.jp/content/tobii_eyex/"&gt;アイトラッキングシステム Tobii EyeX（トビーアイエックス）体験コーナー&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;常設コーナーのため営業時間内であればいつでも体験できますので、近場に寄った際には遊んでみてください。&lt;/p&gt;

&lt;h2 id="future-games-in-engadget-例大祭"&gt;Future Games in Engadget 例大祭&lt;/h2&gt;

&lt;p&gt;本日になりますが、エンガジェットのイベント、&lt;a href="http://japanese.engadget.com/event/engadget-reitaisai-2015"&gt;Engadget 例大祭&lt;/a&gt;にて体験コーナーが設けられてます。
17:30〜19:00の時間でインタラクティブゾーンの場所になります。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://japanese.engadget.com/2015/05/28/dead-eye-land/?ncid=rss_truncated&amp;amp;utm_source=dlvr.it&amp;amp;utm_medium=twitter"&gt;例大祭にライダーなりきり体験『ナレルンダー！』。視線でゾンビを撃つDead Eye Landも遊べます - Engadget Japanese&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;体験できるだけでなく、参加者でスコアを競って最高スコアの人は景品がもらえるらしいです（詳細はあまり知らないです）。
また、&lt;a href="http://gamekun.com/"&gt;スーパーピコピコクラブ（スーピコ）&lt;/a&gt;がゲーム実況を担当するそうです！&lt;/p&gt;

&lt;p&gt;例大祭が満員御礼とのことで当日チケットはなくなってしまったようなのですが、
来られる方がいましたらぜひ足を運んでみてください。&lt;/p&gt;

&lt;h2 id="global-game-jam-2015"&gt;Global Game Jam 2015&lt;/h2&gt;

&lt;p&gt;ここからは、1月に行ったGGJのイベント模様です。&lt;/p&gt;

&lt;h3 id="開発場所"&gt;開発場所&lt;/h3&gt;

&lt;p&gt;私は今回が初参加で、会場はバンダイナムコ未来研究所を選びました。&lt;br&gt;
&lt;a href="http://ggj2015-bns.peatix.com/"&gt;Global Game Jam 2015 バンダイナムコ未来研究所会場 | Peatix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;開発場所は、バンダイナムコ未来研究所の社員食堂で行って、とても広く快適に作業ができました。
イベントの後半にネットワークトラブルがあってけっこうごたごたしたのですが、全体的にはとても満足の行く会場だったと思います。&lt;/p&gt;

&lt;p&gt;また、ここのバンダイナムコ会場では泊まりは禁止されていて23時には閉まってしまうので、
みんな夜帰って次の日の朝会場にきて作業、みたいな感じでやりました。&lt;/p&gt;

&lt;h3 id="テーマ"&gt;テーマ&lt;/h3&gt;

&lt;p&gt;テーマはイベント当日に発表されるためそれまではわからないのですが、今回は&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「WHAT DO WE DO NOW ?」（私たちは今何をする？）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=N1W5VxdNyNk"&gt;Global Game Jam 2015 - Theme Announcement - YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということでした。&lt;br&gt;
この一文から各チームでアイデアを膨らませて作っていきます。&lt;/p&gt;

&lt;h3 id="アイデア"&gt;アイデア&lt;/h3&gt;

&lt;p&gt;私たちのチームはいろいろ話し合った結果、Tobii EyeXを使ったアイトラッキングゲームでいこう、ということになりました。&lt;/p&gt;

&lt;p&gt;ゲームアイデアは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;もぐらたたきみたいにぼこぼこ倒せるのがいいね&lt;/li&gt;
&lt;li&gt;ゾンビのガンシューティングみたいなのはどうだろう&lt;/li&gt;
&lt;li&gt;ただのゾンビゲームだと驚きがないから視線入力ならではの仕掛けを作りたいね&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というところから、一見普通の「ゾンビを倒すガンシューティングゲーム」だけど、進めていくと・・・
みたいな感じです。&lt;/p&gt;

&lt;h3 id="開発"&gt;開発&lt;/h3&gt;

&lt;p&gt;会場には70人ぐらい集まって全12チーム、内訳はUnity3Dが10チーム、Unreal Engine 4が2チームということでした。&lt;/p&gt;

&lt;p&gt;私たちのチームはみんなUnity経験者だったので、Unity3Dで作ることになりました。&lt;br&gt;
Unity 3Dの最新バージョン4.6.1f1、Assets Serverを使っての開発で、
1人がディレクター、4人がエンジニアという構成になりました。&lt;/p&gt;

&lt;p&gt;また、Tobii EyeXは最初は使う予定はなかったのですが、
Tobii EyeXの会社（トビー・テクノロジー）の方もきていて、実際に体験デモをやって試してみたり、
技術的なところを確認したりして決めました。
実際のSDKの使い方や実装については、チームの方が夜の間にいろいろ調べてくれていて、
次の日のお昼ごろにはコアな部分はだいぶできていたという…とても助かりました。&lt;/p&gt;

&lt;p&gt;私はUnityはあまり深い部分まではわからないので、メインの部分はほかの3名にやってもらって、
私が作ったのは、iTweenをつかってプレイヤーのパス経路を作成するところと
カメラが自然に追尾するようにコードを組む部分でした。&lt;/p&gt;

&lt;h3 id="発表＆イベント終了"&gt;発表＆イベント終了&lt;/h3&gt;

&lt;p&gt;そんな流れで、きちんとゲームとして成立するところまで完成です。&lt;br&gt;
今回作ったゲームはその特質上、本当の内容は最後の発表まで隠しておいて、
プレゼンのときに誰かにやってもらおう！ということで、会場の司会者の方にプレゼン時にプレイしていただきました。&lt;br&gt;
結果としてはだいぶ会場が盛り上がったので、とてもいい発表になったなと思います。&lt;/p&gt;

&lt;p&gt;イベント終了後にトビーの方とお話していて、どういう反応になるかドキドキしましたが、幸いトビーの方にも好評でした！&lt;/p&gt;

&lt;div id="fb-root"&gt;&lt;/div&gt; &lt;script&gt;(function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = "//connect.facebook.net/ja_JP/all.js#xfbml=1"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk'));&lt;/script&gt;
&lt;div class="fb-post" data-href="https://www.facebook.com/tobii.jp/posts/752928928125351:0" data-width="466"&gt;&lt;div class="fb-xfbml-parse-ignore"&gt;&lt;a href="https://www.facebook.com/tobii.jp/posts/752928928125351:0"&gt;投稿&lt;/a&gt; by &lt;a href="https://www.facebook.com/tobii.jp"&gt;トビー・テクノロジー　Tobii Technology&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;それで、なんとTobii EyeXの無料クーポン券をいただいてしまいました！
無料クーポンで購入して今は無事に家に届いてます。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-05-30/Tobii_EyeX.jpg" /&gt;&lt;/p&gt;

&lt;h3 id="作ったゲーム"&gt;作ったゲーム&lt;/h3&gt;

&lt;p&gt;作ったゲームは &amp;ldquo;&lt;strong&gt;DEAD EYE LAND&lt;/strong&gt;&amp;rdquo; というアイトラッキングを使ったゾンビガンシューティングゲームです。
ただし、ただのゾンビゲームではなく、後半に差し掛かると視線入力ならではの仕掛けが出てきます。
その仕掛けは実際にプレイして楽しんでください！&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-05-30/press_dead_eye_land_02.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-05-30/press_dead_eye_land_03.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;こちらに私たちのチーム（チーム名：BASTARD）のゲームページがあるので、詳しくはそちらを！&lt;br&gt;
&lt;a href="http://globalgamejam.org/2015/games/dead-eye-land"&gt;DEAD EYE LAND | Global Game Jam&amp;reg;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>gnupack(Cygwin) + oh-my-zsh + tmuxの環境を構築する</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/05/28/setup-zsh-tmux-on-cygwin-gnupack/"/>
    <id>http://yuukiar.co/blog/2015/05/28/setup-zsh-tmux-on-cygwin-gnupack/</id>
    <published>2015-05-28T08:00:00+09:00</published>
    <updated>2015-06-03T08:50:25+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;Windowsでターミナル環境を構築する手順です。
Windowsのターミナルツールはいろいろあって、どれにしようか悩むところではありますが、
個人的にMacの環境（oh-my-zsh,tmuxあたり）をなるべくそのまま使いたかったので、それに一番合うものを探しました。&lt;/p&gt;

&lt;p&gt;とはいうものの、3月末あたりからいろいろ試してみて2ヶ月ほど経った今でも「これがベスト！」と思えるものがないのが実情なのですが、
妥協点には至りましたので、このあたりで記事を書いておこうと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Windowsターミナル環境について"&gt;Windowsターミナル環境について&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ConEmu"&gt;ConEmu&lt;/a&gt; / &lt;a href="#MobaXterm"&gt;MobaXterm&lt;/a&gt; / &lt;a href="#Babun"&gt;Babun&lt;/a&gt; / &lt;a href="#Cygwin（純正 / gnupack）"&gt;Cygwin（純正 / gnupack）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1. &lt;a href="#ターミナル環境：gnupack(Cygwin)のセットアップ"&gt;ターミナル環境：gnupack(Cygwin)のセットアップ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#パッケージダウンロード"&gt;パッケージダウンロード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configファイル編集"&gt;configファイル編集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2. &lt;a href="#シェル環境：zsh(oh-my-zsh)のセットアップ"&gt;シェル環境：zsh(oh-my-zsh)のセットアップ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#zshインストール"&gt;zshインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#oh-my-zshインストール"&gt;oh-my-zshインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zshを読み込み直した時のエラー対応"&gt;zshを読み込み直した時のエラー対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ログインシェルの設定"&gt;ログインシェルの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3. &lt;a href="#ターミナルマルチプレクサ：tmuxのセットアップ"&gt;ターミナルマルチプレクサ：tmuxのセットアップ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#tmuxインストール"&gt;tmuxインストール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#socketエラーの対応"&gt;socketエラーの対応&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#マウスを使う設定"&gt;マウスを使う設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4. &lt;a href="#フォント・カラースキーム"&gt;フォント・カラースキーム&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#フォント（Cica）"&gt;フォント（Cica）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#カラースキーム（Japanesque）"&gt;カラースキーム（Japanesque）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#最後に"&gt;最後に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="windowsターミナル環境について"&gt;Windowsターミナル環境について&lt;/h2&gt;

&lt;p&gt;最初に、本題とは少しずれますが、使ってみた主なツールと採用できなかった理由を次の項に書きます。&lt;/p&gt;

&lt;h3 id="conemu"&gt;ConEmu&lt;/h3&gt;

&lt;p&gt;純粋にターミナル環境のツールとしては一番使いやすいと思いました。&lt;br&gt;
zshの環境もスムーズに構築できました。…が、tmuxが起動しませんでした。&lt;br&gt;
また、ConEmu内でコマンドプロンプトを起動して、Chocolateyを使うとインストールできてるようで実際にはインストールできてない、
という点も、最初気付かずに地味にハマっていました。（これはツールのせいというより自分が悪いんですが）&lt;br&gt;
今はChocolatey使うときは純粋にコマンドプロンプトを立ち上げて使うようにしています。
いずれにしろ、tmuxは使いたかったので採用できませんでした。&lt;/p&gt;

&lt;h3 id="mobaxterm"&gt;MobaXterm&lt;/h3&gt;

&lt;p&gt;周辺ツールが充実してて、最近までこれでいこうかなと思っていたツールです。
zsh + tmux環境も問題なく作れました。&lt;br&gt;
ですが、BusyBoxベースというのが思いのほかネックで、RubyまわりやmakeなどをするたびにBusyBox標準のコマンドではエラーになることがあり、
その都度調査しながら使ってました。
BusyBoxコマンドに起因するエラーは、apt-cygでi686-pc-cygwinまわりのパッケージを入れてそちらのlinuxコマンドを指定して解決したり、
ほかにもあったと思いますが、けっこうBusyBoxまわりは自分の環境としては不十分な部分が多かったです。&lt;br&gt;
さくっとインストールして本来の作業に入りたいのに、いちいちエラーで作業が止まって調査して…みたいなのがいい加減面倒くさくなってきたので採用しませんでした。　　&lt;/p&gt;

&lt;h3 id="babun"&gt;Babun&lt;/h3&gt;

&lt;p&gt;ちゃんと試したわけではありませんが、oh-my-zshの環境がデフォルトで揃っていたので入れて試してみるつもりでした。
ただ、デフォルトできっちりと揃いすぎていて、すでにoh-my-zshを入れていてdotfilesで管理している自分の構成には合わなかったので使いませんでした。&lt;br&gt;
どういうハマりどころがあるか未知数ですが、まっさらな環境でoh-my-zshを使ってみたい人にはいいかも。&lt;/p&gt;

&lt;h3 id="cygwin（純正-/-gnupack）"&gt;Cygwin（純正 / gnupack）&lt;/h3&gt;

&lt;p&gt;一番最初に入れたのは純正のCygwinだったのですが、最終的にgnupackのほうに戻ってきました。
最初に入れた時はapt-cygのハッシュアルゴリズム問題（参考：&lt;a href="http://seesaawiki.jp/w/kou1okada/d/apt-cyg#20150330-hash-algorithm-changed"&gt;2015-03-30: ハッシュアルゴリズムの変更 | apt-cyg - PIB&lt;/a&gt;）に見事に引っかかって、
公式は全然音沙汰ないしどのfork使えばいいかいまいちわからないし…というような感じでCygwin面倒くさい！と思って敬遠したのですが、
最近試したらぜんぜん面倒くさいことはなかったので、最初の時はタイミングが悪かったですね。&lt;br&gt;
ちなみにapt-cygのforkに関しては、上でリンクをはったkou1okada氏のサイトで詳しく説明されていて状況がよくわかりました。
ほかにもCygwinまわりのパッチを公開してたり、今現在もアクティブに情報を発信されていて、とても助かってます。&lt;/p&gt;

&lt;p&gt;というような感じで、いろいろ試したあとに改めて使ってみて、結局のところCygwinが一番ハマりどころが少なく、
問題に出くわしても解決しやすかったので、これを使うことにしました。
純正のCygwinでも環境構築はできますが、gnupackのほうが手間が少なくなるのでそちらを入れてます。
純正からgnupackに変えて戸惑ったのは設定の部分ぐらいです。
gnupackはstartup_config.iniというファイルがあってそこに設定を記述するということに気付かず、しばらく試行錯誤してました。&lt;br&gt;
ベストな環境とは思わないのですが、まぁ妥協できる環境かなというところで落ち着いてます。
まぁ…最近いろいろ調べてみて、Windowsでベストなターミナル環境は相当難しいと思っていて、
逆の考え方で、ここまで実現できるのであれば十分だろうという結論に至ってます。&lt;/p&gt;

&lt;h2 id="1.-ターミナル環境：gnupack(cygwin)のセットアップ"&gt;1. ターミナル環境：gnupack(Cygwin)のセットアップ&lt;/h2&gt;

&lt;h3 id="パッケージダウンロード"&gt;パッケージダウンロード&lt;/h3&gt;

&lt;p&gt;ということで前置きが長くなりましたが、実際にインストールに入っていきます。&lt;br&gt;
下記のサイトからgnupackをダウンロードします。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://osdn.jp/projects/gnupack/"&gt;gnupack プロジェクト日本語トップページ - OSDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今の最新版は13.02のようです。&lt;br&gt;
basicとdevelがありますが、gccやRuby、gitが標準で入っているdevelのほうをダウンロードします。
（gnupack_devel-13.02-2015.05.24.exe というファイルです。）&lt;/p&gt;

&lt;p&gt;ダウンロードしたらファイルを解凍します。
解凍先はどこでも任意で構いませんが、ここでは &lt;code&gt;C:\&lt;/code&gt; を指定することにします。&lt;/p&gt;

&lt;h3 id="configファイル編集"&gt;configファイル編集&lt;/h3&gt;

&lt;p&gt;gnupackのホームディレクトリはデフォルトだとパッケージ内のディレクトリになりますが、
ここではWindowsと同じところをホームにしたいので以下の手順のように変更していきます。
以下、解凍したディレクトリを &lt;code&gt;%INST_DIR%&lt;/code&gt;、Windowsのホームディレクトリを &lt;code&gt;%HOME%&lt;/code&gt; として説明していきます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;%INST_DIR%\home\&lt;/code&gt; ディレクトリにあるすべてのファイルを &lt;code&gt;%HOME%\&lt;/code&gt; ディレクトリの中にコピーする。(※)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%INST_DIR%\startup_config.ini&lt;/code&gt; をテキストエディタで開く。&lt;/li&gt;
&lt;li&gt;開いたファイルに記述されている下記の2行を &lt;code&gt;%HOME%&lt;/code&gt; に変更する。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    HOME      = %HOME%
    :
    Init_Current_Dir     = %HOME%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※もし、1.の手順を行った時に、すでに存在するファイルに対して上書きしようとしていたら、
そのあたりは各自の判断で選択してください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%INST_DIR%\startup_cygwin.exe&lt;/code&gt; のショートカットを作成して、デスクトップなりタスクバーなりに置きます。&lt;/p&gt;

&lt;p&gt;ショートカットリンクをダブルクリックするとgnupackのCygwinが起動すると思います。&lt;/p&gt;

&lt;h2 id="2.-シェル環境：zsh(oh-my-zsh)のセットアップ"&gt;2. シェル環境：zsh(oh-my-zsh)のセットアップ&lt;/h2&gt;

&lt;h3 id="zshインストール"&gt;zshインストール&lt;/h3&gt;

&lt;p&gt;まず、apt-cygからzshとこの後に使うパッケージをインストールします。
インストール後、zshのバージョンも確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ apt-cyg install zsh curl
$ zsh --version
zsh 5.0.7 (i686-pc-cygwin)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にzshを起動しますが、&lt;code&gt;.zshrc&lt;/code&gt;ファイルがない状態で起動すると、
いろいろ聞かれて面倒なのと起動後のプロンプトが非常に見にくいので、
最低限の設定だけしておいてzshを起動します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo 'PROMPT="%F{cyan}[%n@%m %d]%f "' &amp;gt;&amp;gt; ~/.zshrc
$ zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="oh-my-zshインストール"&gt;oh-my-zshインストール&lt;/h3&gt;

&lt;p&gt;これでzshが起動したので、oh-my-zshのインストールを行います。
インストールは、oh-my-zshの公式にしたがうだけでOKです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh#basic-installation"&gt;robbyrussell/oh-my-zsh #Basic Installation - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記に書いてあるように、次のコマンドを実行します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで終わりですが、gnupack(Cygwin)の場合、インストールの最後に下記のエラーが出ます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sh: 行 37: chsh: コマンドが見つかりません
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gnupack(Cygwin)に&lt;code&gt;chsh&lt;/code&gt;コマンドがないためですが、
oh-my-zshのインストールスクリプトを見るとこの後に実行している処理はないので（echoとかsourceだけ）、
少なくとも現時点ではエラーでも問題なさそうです。&lt;/p&gt;

&lt;h3 id="zshを読み込み直した時のエラー対応"&gt;zshを読み込み直した時のエラー対応&lt;/h3&gt;

&lt;p&gt;ここでzshを読み込みなおしてみます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ source ~/.zshrc
compdef: unknown command or service: git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合、読み込み直したら&lt;code&gt;compdef: 〜&lt;/code&gt;というエラーがでましたが、
これは下記issueを参考に、次のコマンドを打って解決しました。&lt;br&gt;
&lt;a href="https://github.com/robbyrussell/oh-my-zsh/issues/630#issuecomment-40465577"&gt;compdef: unknown command or service: git · Issue #630 · robbyrussell/oh-my-zsh - GitHub&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ compaudit | xargs -I % chmod g-w "%"
$ compaudit | xargs -I % chown [username] "%"
  ※ [username] の部分は各自のユーザー名に置き換えること。

$ rm ~/.zcompdump*
$ compinit
$ source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="ログインシェルの設定"&gt;ログインシェルの設定&lt;/h3&gt;

&lt;p&gt;最後にログインシェルをzshに切り替えます。&lt;br&gt;
gnupackの場合は &lt;code&gt;%INST_DIR%\startup_config.ini&lt;/code&gt; に設定が書かれていて、
&lt;code&gt;SHELL&lt;/code&gt;, &lt;code&gt;Cmdline_Image&lt;/code&gt;の２箇所の書き換えと、
&lt;code&gt;zsh.exe&lt;/code&gt;の１箇所を新しく行追加します。  &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; [Process Variable]
    :
    SHELL     = /usr/bin/zsh
    :
 [startup_cygwin.exe]
    Cmdline_Image        = "%term.exe%" "%zsh.exe%" --login
    :
 [Local Variable]
    :
    zsh.exe         = %CYGWIN_DIR%\bin\zsh.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="3.-ターミナルマルチプレクサ：tmuxのセットアップ"&gt;3. ターミナルマルチプレクサ：tmuxのセットアップ&lt;/h2&gt;

&lt;h3 id="tmuxインストール"&gt;tmuxインストール&lt;/h3&gt;

&lt;p&gt;tmuxのインストールはapt-cygでインストールするだけで、依存関係にあるパッケージも同時にインストールされます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ apt-cyg install tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでtmuxが実行できるようになりました。&lt;/p&gt;

&lt;h3 id="socketエラーの対応"&gt;socketエラーの対応&lt;/h3&gt;

&lt;p&gt;（2015-06-03 ：対応方法がわかったので記事を更新）&lt;/p&gt;

&lt;p&gt;実行はできるようになったのですが、
tmuxを起動しようとすると下記のsocketエラーになる方がいると思います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tmux
can't create socket: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これは以下のようにして&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TMUX_TMPDIR&lt;/code&gt; の環境変数を.zshrcに追加する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TMUX_TMPDIR&lt;/code&gt; で設定したディレクトリを生成しておく&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TMUX_TMPDIR&lt;/code&gt; で設定するディレクトリは&lt;code&gt;/tmp&lt;/code&gt; 配下以外の場所にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をすることで解決しました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo 'export TMUX_TMPDIR=/var/run/tmux' &amp;gt;&amp;gt; ~/.zshrc
$ mkdir /var/run/tmux
$ source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしておくことでノーオプションでtmuxが起動できるようになります。&lt;/p&gt;

&lt;p&gt;以下、動作確認のためのコマンドです。&lt;br&gt;
試しにtmuxを複数回ネスト起動して、生成されるディレクトリ・ファイルの情報を表示しました。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tmux
$ tmux -L default-nest1
$ tmux -L default-nest2

$ ls -l /var/run/tmux
drwxrwx---+ 1 hogeuser None 0 6月   2 09:37 tmux-197609

$ tree -pug /var/run/tmux/
/var/run/tmux/
└── [drwxrwx--- hogeuser None    ]  tmux-197609
    ├── [srwxrwx--- hogeuser None    ]  default
    ├── [srwxrwx--- hogeuser None    ]  default-nest1
    └── [srwxrwx--- hogeuser None    ]  default-nest2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;197609の箇所は &lt;code&gt;$UID&lt;/code&gt; の値が設定されていて、マシンによって変わります。
動作確認もできたので、これでtmuxのセットアップは完了です。&lt;/p&gt;

&lt;h3 id="マウスを使う設定"&gt;マウスを使う設定&lt;/h3&gt;

&lt;p&gt;マウスを使うにはtmuxの設定とmintty（Cygwinのターミナルツール）の設定が必要になるので、
それも設定します。&lt;/p&gt;

&lt;p&gt;まず、tmuxのほうは、&lt;code&gt;.tmux.conf&lt;/code&gt; というファイルに下記のような行を追加します。
設定内容の意味に関してはここでは書かないので他のサイトを参考にしてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-window-option -g mode-mouse on
set-option -g mouse-utf8 on
set-option -g mouse-resize-pane on
set-option -g mouse-select-pane on
set-option -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にmintty側の設定は以下のようにします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;アプリケーションの左上端のアイコンをクリックして Options&amp;hellip; を選択する&lt;/li&gt;
&lt;li&gt;Mouseの項目

&lt;ul&gt;
&lt;li&gt;Right click action: Paste または Extend&lt;/li&gt;
&lt;li&gt;Application mouse mode: Application&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Windowの項目

&lt;ul&gt;
&lt;li&gt;Scrollbar: None&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;こうすることで、ペインごとにマウスのホイールスクロールなどが使えるようになります。
これでtmuxのセットアップは完了です。&lt;/p&gt;

&lt;h2 id="4.-フォント・カラースキーム"&gt;4. フォント・カラースキーム&lt;/h2&gt;

&lt;h3 id="フォント（cica）"&gt;フォント（Cica）&lt;/h3&gt;

&lt;p&gt;WindowsではConsolasやRicty、Miguフォントのあたりが有名のようで、
Powerlineのパッチを適用する記事もよく見かけますが、
それらを1つにした &lt;strong&gt;Cica&lt;/strong&gt; というフォントを公開されている方がいて、私はそれを使わせてもらっています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://sv.btnb.jp/cica-font"&gt;プログラミングに適した合成日本語等幅フォント Cica を公開します | さばなべ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;フォントイメージは、上記サイトでWebフォントとして記事に適用されているので、
記事をご覧いただければどういうイメージになるかわかります。
Powerlineのパッチも適用済みなので、zipファイルをダウンロードして
解凍したフォントファイルをコピーするだけです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;上記サイトからCica.zipのファイルをダウンロードして解凍する&lt;/li&gt;
&lt;li&gt;コントロールパネル → デスクトップのカスタマイズ → フォント の順にクリックする&lt;/li&gt;
&lt;li&gt;フォントフォルダが表示されるので、先ほど解凍したCicaフォルダの *.ttfをフォントフォルダにコピー＆ペーストする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;このフォントですが、一応Powerlineが適用されているものの完全ではないようで、
「・」で表示されてしまう文字もあったりするので、私は別の文字に置き換えて使ってます。&lt;/p&gt;

&lt;h3 id="カラースキーム（japanesque）"&gt;カラースキーム（Japanesque）&lt;/h3&gt;

&lt;p&gt;minttyのカラースキームは、MacのiTerm2で使ってるJapanesqueというテーマを真似て設定しています。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://this.aereal.org/entry/2013/01/02/222304"&gt;iTerm 2 で使えるカラースキーム、Japanesque を作った  - this A moment&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Macだと上記のような外観になるのですが、とても気に入って使っているのでminttyもそれに合わせました。
気になる人がいましたら、githubにあげたので.minttyrcにコピペして使ってみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yuuki-arc/mintty-color-schemes-Japanesque"&gt;yuuki-arc/mintty-color-schemes-Japanesque - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="最後に"&gt;最後に&lt;/h2&gt;

&lt;p&gt;まだtmuxまわりの外観など調整したいところはまだまだありますが、
現在こんな感じのターミナルになってます！&lt;/p&gt;

&lt;p&gt;&lt;a href="http://yuukiar.co/img/2015-05-28/2015-05-28-windows-mintty.jpg"&gt;&lt;img src="/img/2015-05-28/2015-05-28-windows-mintty.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Windows 7でパッケージ管理システム「Chocolatey」を導入する</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/04/04/windows-chocolatey/"/>
    <id>http://yuukiar.co/blog/2015/04/04/windows-chocolatey/</id>
    <published>2015-04-04T18:00:00+09:00</published>
    <updated>2015-05-17T04:01:40+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;パッケージ管理システムとは、コマンド一つでツールやソフトウェアのインストールやアップデート、アンインストールなどが簡単にできるようになるツールのことです。&lt;/p&gt;

&lt;p&gt;MacではMacPortsや最近だとHomebrewが有名ですが、
まだまだMac環境には及ばないもののWindowsでも最近はChocolateyというものがあります。
（チョコレーティと呼ぶそう）&lt;br&gt;
Windowsの特質上、Chocolateyからのアンインストールは不完全なようですが、
それでも手軽にインストールしたりパッケージ管理できるのはそれだけで十分なメリットといえます。&lt;/p&gt;

&lt;p&gt;ここでは、その「Chocolatey」のインストール方法と使い方について書いていきます。&lt;/p&gt;

&lt;h2 id="参考"&gt;参考&lt;/h2&gt;

&lt;p&gt;Chocolateyは &lt;strong&gt;v0.9.9.x&lt;/strong&gt; から大幅にドキュメントが更新されていて、該当バージョン以降は下記のwikiを参照するのがよいようです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/chocolatey/choco/wiki"&gt;Home · chocolatey/choco Wiki&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="前提条件"&gt;前提条件&lt;/h2&gt;

&lt;p&gt;ここでは &lt;strong&gt;v0.9.9.4（2015年4月4日時点の最新版）&lt;/strong&gt; をベースにします。
これからインストールする人は気にしなくともよいですが、
&lt;strong&gt;v0.9.8.24&lt;/strong&gt; からChocolateyのインストール先が変更になっていて、
現在は &lt;code&gt;C:\ProgramData\chocolatey&lt;/code&gt; にインストールされます。&lt;/p&gt;

&lt;h2 id="1.-chocolateyインストール"&gt;1. Chocolateyインストール&lt;/h2&gt;

&lt;p&gt;インストール方法は、コマンドプロンプトやPowerShellを使う方法などいくつかあります。
コマンドプロンプトからインストールするのが一番手軽なので、その方法で進めることにします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;コマンドプロンプトを右クリックして &lt;strong&gt;「管理者として実行」&lt;/strong&gt; を選択する&lt;/li&gt;
&lt;li&gt;以下のコマンドを貼り付けて実行&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@powershell -NoProfile -ExecutionPolicy unrestricted -Command "(iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))) &amp;gt;$null 2&amp;gt;&amp;amp;1" &amp;amp;&amp;amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行が終わったら下記のコマンドでインストールされているか確認できます。
正常にインストールできていれば &lt;code&gt;Chocolatey v0.9.9.4&lt;/code&gt; が表示されるはずです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\&amp;gt; clist -lo
Chocolatey v0.9.9.4
0 packages installed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでいったんWindowsを再起動しておきます。
理由は、Chocolateyのインストールによって環境変数が追加されるためです。
追加された環境変数を確実に読み込ませるために、Windowsを再起動しておいたほうが安全だからです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ChocolateyInstall=C:\Chocolatey
Path=...:C:Chocolatey\bin:...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでChocolateyが使えるようになったので、次からはパッケージを入れていきます。&lt;/p&gt;

&lt;h2 id="2.-chocolateyguiインストール"&gt;2. ChocolateyGUIインストール&lt;/h2&gt;

&lt;p&gt;Chocolateyはコマンドベースですが、GUIツールも用意されています。
そこでGUIツールをChocolateyを使ってインストールしてみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「管理者として実行」しているコマンドプロンプト&lt;/strong&gt; で実行します。&lt;br&gt;
※ コマンドプロンプトは「管理者として実行」でないとインストールに失敗します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\&amp;gt; cinst -y chocolateygui
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろメッセージが流れますが、下記のように成功メッセージが流れていればOKです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; :
PowerShell v4.0.20141001
 :
 powershell has been installed successfully.

ChocolateyGUI v0.13.1
 :
 chocolateygui has been installed successfully.

Chocolatey installed 2/2 package(s). 0 package(s) failed.
 See the log for details.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終わったらスタートメニューにChocolateyGUIが追加されているので起動してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-04-04/2015_04_04_17_28.png" /&gt;&lt;/p&gt;

&lt;h2 id="コマンド各種"&gt;コマンド各種&lt;/h2&gt;

&lt;p&gt;下記のコマンドリファレンスを見るのが一番ですが、ひと通り使用方法を書きます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/chocolatey/choco/wiki/CommandsReference"&gt;CommandsReference · chocolatey/choco Wiki&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;基本は &lt;code&gt;choco ...&lt;/code&gt; というコマンドで、省略形が &lt;code&gt;c...&lt;/code&gt; になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[pkgname]&lt;/code&gt; は複数指定できる&lt;/li&gt;
&lt;li&gt;オプション指定は &lt;code&gt;-&lt;/code&gt;、&lt;code&gt;--&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt; のどれでも同じ意味になる&lt;br&gt;
（リファレンスには、一文字オプションで &lt;code&gt;--&lt;/code&gt; は使うべきでないと記載）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="インストール"&gt;インストール&lt;/h3&gt;

&lt;p&gt;パッケージをインストールします。&lt;br&gt;
&lt;code&gt;-y&lt;/code&gt; をつけるとスクリプト毎の実行確認がでなくなるので楽です。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\&amp;gt; choco install [pkgname]
C:\&amp;gt; cinst [pkgname]
C:\&amp;gt; cinst [pkgname] [pkgname] -y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="アップグレード"&gt;アップグレード&lt;/h3&gt;

&lt;p&gt;パッケージをアップグレードします。&lt;br&gt;
パッケージ名に &lt;code&gt;all&lt;/code&gt; を指定すると、インストールしているパッケージすべてをアップグレードします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\&amp;gt; choco upgrade [pkgname]
C:\&amp;gt; cup [pkgname]
C:\&amp;gt; cup all
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="アンインストール"&gt;アンインストール&lt;/h3&gt;

&lt;p&gt;パッケージをアンインストールします。
ただし、Chocolateyの管理対象から外れるだけでファイル自体は残っているため、
パッケージ毎に推奨される方法で別途アンインストールが必要になります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\&amp;gt; choco uninstall [pkgname]
C:\&amp;gt; cuninst [pkgname]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="chocolateyで管理できるパッケージの全一覧"&gt;Chocolateyで管理できるパッケージの全一覧&lt;/h3&gt;

&lt;p&gt;パッケージ管理対象の一覧が表示されます。
表示されるまで少し時間がかかります。
&lt;code&gt;search&lt;/code&gt; も &lt;code&gt;list&lt;/code&gt; も同じで違いはないです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c:\&amp;gt; choco search
c:\&amp;gt; choco list
c:\&amp;gt; clist
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="インストール済みパッケージ一覧"&gt;インストール済みパッケージ一覧&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--localonly&lt;/code&gt;、&lt;code&gt;-lo&lt;/code&gt;、&lt;code&gt;-l&lt;/code&gt; をつけることでインストール済みパッケージの一覧を表示できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c:\&amp;gt; choco list --localonly
c:\&amp;gt; clist -lo
c:\&amp;gt; clist -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="ヘルプ"&gt;ヘルプ&lt;/h3&gt;

&lt;p&gt;コマンド名に &lt;code&gt;-h&lt;/code&gt; をつけるとそのコマンドのヘルプが参照できます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c:\&amp;gt; choco -h
c:\&amp;gt; choco install -h
c:\&amp;gt; cinst -h
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="非推奨となったコマンド"&gt;非推奨となったコマンド&lt;/h3&gt;

&lt;p&gt;下記のコマンドは非推奨になっているので今後使えなくなります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c:\&amp;gt; choco update ...
c:\&amp;gt; choco version ...
c:\&amp;gt; cver ...
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>LINE主催の「GAME BOOT CAMP」に参加してゲーム開発してきました！</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/02/05/line-game-boot-camp/"/>
    <id>http://yuukiar.co/blog/2015/02/05/line-game-boot-camp/</id>
    <published>2015-02-05T14:13:00+09:00</published>
    <updated>2015-05-31T22:18:51+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;1月17日(土)〜18日(日)にかけて、株式会社LINE主催のGAME BOOT CAMPに参加してきました！&lt;/p&gt;

&lt;p&gt;&lt;a href="http://gamebootcamp.net/"&gt;GAME BOOT CAMP - 現役クリエイターをうならせろ！ -&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="GAME BOOT CAMP" src="/img/2015-02-05/DSC06084.jpg" /&gt;&lt;/p&gt;

&lt;h2 id="イベントについて"&gt;イベントについて&lt;/h2&gt;

&lt;p&gt;ゲーム開発5年未満の経験者が対象で、1泊2日のキャンプ方式で最大５名で１つのチームを作り30時間の間でゲームを作るというイベントです。
参加は申込者から抽選だったのですが、運良く当選したため参加することに。&lt;/p&gt;

&lt;p&gt;会場は渋谷ヒカリエのLINEオフィス27階（！）で、外の景色は眺めがよく会場も広々とした空間でした。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06256.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;チームは事前に割り振られていて、私はCocos2d-xで申し込んでいたのでCocos2d-xのチームになりました。
事前準備としてチームメンバーとチャットで話しあう時間があったので、うちのチームではChatWorkを使ってゲームアイデア案出しをしたり、フレームワークのバージョンやツール選定などをあらかじめ決めておきました。&lt;/p&gt;

&lt;p&gt;当日は10時半から始まって、事前に話し合ったアイデアをベースに具体的に内容を詰めていき、誰がどの部分をやるか担当の分担などをしました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06160.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;参加中にイベント開催側の方とお話することがあってチーム内訳を聞いたのですが、
全12チーム中、Unity3Dが10チーム、Cocos2d-iPhoneが1チーム、Cocos2d-xがうちの1チームだったそうで。
こういう系のイベントはやっぱりUnity勢が主流なんですねー。&lt;/p&gt;

&lt;p&gt;1日目のお昼すぎあたりで中間発表があり、各々のチームで発表しました。
うちのチームは見せられるものはなかったので、どういうゲームにするか企画案について発表しました。
このとき主催者の方からチーム名決めていいですよ、という話があり、うちのチーム名はゲームアイデアから突発的に「消しピン」に決まりましたｗ&lt;/p&gt;

&lt;p&gt;今回のイベントは参加者の他に、協賛各社からチューターも参加していて審査員やアドバイザーとして関わってくださったのですが、
途中でそのチューターの方たちのプレゼンがあったりして、そういったところも気分転換に楽しめました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06179.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;また、食べ物に関してもすべて無料での提供があり、
朝昼夕３食はもちろんのこと、さまざまなドリンクやお菓子など、
とにかく何でもでてきて自分たちで準備するものは何もなかったですｗ&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06167s.jpg" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/DSC06229s.jpg" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/DSC06235s.jpg" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/DSC06237s.jpg" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/DSC06257s.jpg" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/DSC06265s.jpg" class="apps-img" /&gt;&lt;/p&gt;

&lt;p&gt;さらにさらに、遠いところから来た人には宿泊費・交通費補助、Unity3Dの人は有料アセット補助(最大5万円とか…！)までありと、
何から何まで至れり尽くせりでどれだけお金かけてるんだろう…と思いつつ、
参加者にとってはこれ以上ないくらいのおもてなしでした。&lt;/p&gt;

&lt;p&gt;GAME BOOT CAMPのためにグッズまで作っていて、
全員に配布されるというぐらい開催側の意気込みでした…！（ありがとうございます！）
&lt;img src="/img/2015-02-05/goods.png" /&gt;&lt;/p&gt;

&lt;p&gt;開発面においても、チューターの方からアドバイスを受けることができたり、
ゆったりしたスペースの中でチームごとにまとまって一つのテーブルで開発ができたり、
ホワイトボードやら付箋やら用意されていて自由に使うことができたりと、
とにかく開発に集中できる環境が全力で用意されているといった感じで最高の環境でした。&lt;/p&gt;

&lt;p&gt;twitterまとめもあるので、こちらも眺めてみると雰囲気とかわかってもらえるかなと思います！
&lt;a href="http://togetter.com/li/772153"&gt;GAME BOOT CAMP 関連まとめ #gbc_tokyo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="開発したゲーム"&gt;開発したゲーム&lt;/h2&gt;

&lt;p&gt;うちのチーム「消しピン」が開発したゲームですが、ベースアイデアとしてはこんな感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;昔懐かしの消しピン(指で消しゴムを弾いて机から落とす遊び)&lt;/li&gt;
&lt;li&gt;スマブラみたいなイメージやシステムで吹っ飛び率とかほしい&lt;/li&gt;
&lt;li&gt;ユーザーどうしの対戦型ゲーム&lt;/li&gt;
&lt;li&gt;基本は画面から落ちたら負け&lt;/li&gt;
&lt;li&gt;消しゴムを弾く方法はスマホの画面を消しゴムに見立てスワイプ&lt;/li&gt;
&lt;li&gt;消しゴムの種類によって性能が違う&lt;/li&gt;
&lt;li&gt;必殺技が使えたりとゲームならではのド派手なもの&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="GAME BOOT CAMP" src="/img/2015-02-05/DSC06185.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;チームは構成は、企画・ディレクション1名、エフェクトまわり1名、プログラマー3名という感じでした。
ユーザー同士の対戦ゲームということで、Photonを使うといいんじゃないかと事前に話し合っていて、
私はPhoton Realtimeまわりを主に担当しました。&lt;/p&gt;

&lt;p&gt;ということで、意気込んで開発に入ったのですが…&lt;/p&gt;

&lt;p&gt;1日目泊まり込みで2日目も時間ギリギリまで粘ったものの、
結果的には中途半端な状態で最終発表を迎えてふがいない結果となってしまいました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06293.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Photonに関しては、SDKのおかげでだいぶ楽に複数端末での同期処理を実装できましたが、
Cocos2d-xで2日間で仕上げるにはちょっと時間が足りなかったかなという感じです。
いちおう、開発途中のままとなって完成には至らなかったのですが、こんな感じのゲーム画面です。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/game1s.png" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/game2s.png" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/game3s.png" class="apps-img" /&gt;
&lt;img src="/img/2015-02-05/game4s.png" class="apps-img" /&gt;&lt;/p&gt;

&lt;p&gt;開発途中のままだと不完全燃焼なので、いちおうストアに公開まではもっていきたいなとは思いますが、
ユーザー同士の対戦ではなくCPU対戦にして出そうかなぁとぼんやり考えてます。
ユーザー対戦を現実的にするには、人数集めだったりPhoton側の制限だったりと、
いくつかハードルがあってストアに公開するのは厳しそうなので。&lt;/p&gt;

&lt;p&gt;そんな感じで、2日間30時間のGAME BOOT CAMPのレポートでした！
楽しい時間をありがとうございました〜！&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2015-02-05/DSC06395.jpg" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHP4.4.2 をインストールして PHPBrew で管理する</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/01/28/setup-php4.4.2-with-phpbrew/"/>
    <id>http://yuukiar.co/blog/2015/01/28/setup-php4.4.2-with-phpbrew/</id>
    <published>2015-01-28T00:20:00+09:00</published>
    <updated>2015-05-22T00:29:25+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="/blog/2015/01/27/install-phpbrew/"&gt;前回のエントリ&lt;/a&gt;で PHPBrew をインストールしましたが、
PHPBrewでインストール及び管理できるのは &lt;code&gt;phpbrew known --old&lt;/code&gt; の一覧の通り、5.2以降になります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew known -old
5.6: 5.6.4, 5.6.3, 5.6.2, 5.6.1, 5.6.0 ...
5.5: 5.5.20, 5.5.19, 5.5.18, 5.5.17, 5.5.16, 5.5.15, 5.5.14, 5.5.13 ...
5.4: 5.4.36, 5.4.35, 5.4.34, 5.4.33, 5.4.32, 5.4.31, 5.4.30, 5.4.29 ...
5.3: 5.3.29, 5.3.28, 5.3.27, 5.3.26, 5.3.25, 5.3.24, 5.3.23, 5.3.22 ...
5.2: 5.2.17, 5.2.16, 5.2.15, 5.2.14, 5.2.13, 5.2.12, 5.2.11 ...
You can run `phpbrew update` to get a newer release list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように通常は5.2以降のバージョンしか管理できませんが、
PHPの古いバージョンをマニュアルでインストールしてPHPBrewのディレクトリに配置することでPHPBrew上で管理することが可能です。
ただし、ここで行う方法はバージョンをPHPBrewで切り替えできるようにするだけで、
VariantsやExtensionのインストールといったPHPBrewの恩恵は受けられません。&lt;/p&gt;

&lt;p&gt;以上を踏まえた上で、今回は PHP4.4.2 のバージョンをPHPBrewで管理できるようにインストールしていきます。&lt;/p&gt;

&lt;h2 id="1.-パッケージダウンロード＆展開"&gt;1. パッケージダウンロード＆展開&lt;/h2&gt;

&lt;p&gt;まずはPHP4.4.2のパッケージをダウンロードします。
古いバージョンのPHPパッケージは下記の場所に置かれています。&lt;br&gt;
&lt;a href="http://museum.php.net/"&gt;http://museum.php.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次のようにコマンドを入力して、PHPBrewの適切なディレクトリに配置しつつパッケージを展開します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~/.phpbrew/distfiles/
$ wget http://museum.php.net/php4/php-4.4.2.tar.bz2
$ tar -C ~/.phpbrew/php -xjf php-4.4.2.tar.bz2
$ cd ~/.phpbrew/php/php-4.4.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2.-インストール"&gt;2. インストール&lt;/h2&gt;

&lt;p&gt;ターミナルで下記のように入力していきます。
&lt;code&gt;./configure&lt;/code&gt; のオプションは任意のオプションを入れてください。&lt;br&gt;
※ &lt;code&gt;--prefix&lt;/code&gt;の&lt;code&gt;[ユーザー名]&lt;/code&gt;の箇所は環境に合わせて置き換えてください。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ LD_FLAGS="-L/usr/local/lib" EXTRA_LIBS="-lresolv" ./configure \
--prefix=/Users/[ユーザー名]/.phpbrew/php/php-4.4.2 \
--with-mysql \
--with-gd \
--with-ttf \
--enable-zend-multibyte \
--enable-mbstring \
--enable-mbregex \
--with-jpeg \
--with-png \
--with-freetype \
--with-zlib \
--enable-inline-optimization \
--disable-debug \
--enable-trans-sid \
--disable-cgi

$ make
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="3.-pearのインストール（php4.4.2の場合）"&gt;3. PEARのインストール（PHP4.4.2の場合）&lt;/h2&gt;

&lt;p&gt;通常は2.までの手順でインストールは完了ですが、PHP4.4.2の場合はバグによりPEARのインストールに失敗します。
&lt;code&gt;make install&lt;/code&gt;のときに下記のメッセージが出力されているのが確認できると思います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:
Installing PEAR environment:      /Users/hoge/.phpbrew/php/php-4.4.2/lib/php/
[PEAR] Archive_Tar: bad md5sum for file /Users/hoge/.phpbrew/php/php-4.4.2/lib/php/Archive/Tar.php
[PEAR] Console_Getopt: bad md5sum for file /Users/hoge/.phpbrew/php/php-4.4.2/lib/php/Console/Getopt.php
[PEAR] HTML_Template_IT: bad md5sum for file /Users/hoge/.phpbrew/php/php-4.4.2/lib/php/HTML/Template/IT.php
[PEAR] Net_UserAgent_Detect- installed: 2.0.1
warning: pear/PEAR requires package "pear/Archive_Tar" (recommended version 1.3.1)
warning: pear/PEAR requires package "pear/Console_Getopt" (recommended version 1.2)
:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;bad md5sum&lt;/code&gt;と言われており、該当箇所にファイルが存在していないので、
別のところからファイルを持ってくることで解決します。
ここでは、 &lt;code&gt;~/.phpbrew/php/php-4.4.2/pear/&lt;/code&gt;からファイルをコピーすることにします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ~/.phpbrew/php/php-4.4.2/
$ cp -r pear/Archive lib/php/
$ cp -r pear/Console lib/php/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コピー後、pearのコマンドで正常に動作するか確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pear list
Installed packages, channel pear.php.net:
=========================================
Package              Version State
Net_UserAgent_Detect 2.0.1   stable
PEAR                 1.4.6   stable
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="php4.4.2への切り替え＆戻し方"&gt;PHP4.4.2への切り替え＆戻し方&lt;/h2&gt;

&lt;p&gt;PHP4.4.2がインストールされていることを確認します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew list
* (system)
php-4.4.2
php-5.6.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP4.4.2に切り替えます。  &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew switch 4.4.2
$ php -v
PHP 4.4.2 (cli) (built: Jan 28 2015 05:55:15)
Copyright (c) 1997-2006 The PHP Group
Zend Engine v1.3.0, Copyright (c) 1998-2004 Zend Technologies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;phpbrew switch&lt;/code&gt;はターミナルを閉じて開きなおしても設定が残ります。
一時的に切り替えたいだけであれば&lt;code&gt;phpbrew use&lt;/code&gt;で切り替えるといいです。&lt;/p&gt;

&lt;p&gt;デフォルトの&lt;code&gt;(system)&lt;/code&gt;の環境に戻したい場合は次のように入力します。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew switch-off  # switchで切り替えた場合
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew off  # useで切り替えた場合
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このデフォルトの環境に戻す方法は実は重要で、
PHP4で&lt;code&gt;switch&lt;/code&gt;や&lt;code&gt;list&lt;/code&gt;オプションを実行しようとしてもエラーで使えません。
そのため、他のバージョンに切り替えるときは、いったんデフォルトに戻してから切り替える必要があります。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>PHPBrew で PHP の複数バージョン管理を行う</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/01/27/install-phpbrew/"/>
    <id>http://yuukiar.co/blog/2015/01/27/install-phpbrew/</id>
    <published>2015-01-27T23:50:00+09:00</published>
    <updated>2015-04-04T21:23:11+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;PHPの複数のバージョンを管理できるツールとして、有名どころとしてphpenvやPHPBrewがあります。
どちらもとても優れたツールですが、PHPBrewのほうが個人的に使い勝手がいいと思っています。
また、phpenvは注意しないとrbenvと干渉してしまうため（phpenvのほうが干渉する）、
ここではPHPBrewについて書いていきます。&lt;/p&gt;

&lt;h2 id="1.-インストール手順"&gt;1. インストール手順&lt;/h2&gt;

&lt;p&gt;インストールは簡単で下記のように入力していきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
$ chmod +x phpbrew
$ sudo mv phpbrew /usr/bin/phpbrew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストール後、初期設定を行います。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.bashrcか.zshrcに以下のコマンドを記載して、シェル起動時にPHPBrewの設定が読み込まれるようにします。
※bashもzshも同じ記載内容&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;source ~/.phpbrew/bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;!--
これで最低限の設定は完了ですが、Homebrewを使っている場合は下記のコマンドを入力しておくと、
ライブラリによって `php install` 時にはHomebrewで入れたディレクトリを考慮してくれるようです。

```
$ phpbrew lookup-prefix homebrew
```
--&gt;

&lt;p&gt;これでPHPの複数バージョン管理ができるようになりました。
使い方はphpbrewのヘルプをみるとだいたい分かるかと思います。&lt;/p&gt;

&lt;h2 id="phpbrew-コマンド一覧（例）"&gt;phpbrew コマンド一覧（例）&lt;/h2&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;phpbrew list
phpbrew known --update
phpbrew known --old
phpbrew install 5.4.0 +default
phpbrew install --test 5.4.0
phpbrew use 5.6.4
phpbrew switch 5.6.4
phpbrew off
phpbrew switch-off
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="phpbrew-コマンドの詳細ヘルプ"&gt;phpbrew コマンドの詳細ヘルプ&lt;/h2&gt;

&lt;p&gt;例えば &lt;code&gt;phpbrew known&lt;/code&gt; のコマンドを調べたいときは次のようにします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ phpbrew help known
NAME
known - List known PHP versions

SYNOPSIS
/usr/bin/phpbrew known [options]


OPTIONS
-m, --more
Show more older versions

-o, --old
List old phps (less than 5.3)

-u, --update
Update release list


phpbrew 1.18.4      powered by https://github.com/c9s/CLIFramework
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>homesick+Brew-file+MackupでMac環境構築（OS X Yosemite編）</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2015/01/08/setup-mac-os-x-yosemite/"/>
    <id>http://yuukiar.co/blog/2015/01/08/setup-mac-os-x-yosemite/</id>
    <published>2015-01-08T02:00:00+09:00</published>
    <updated>2015-05-22T00:28:16+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;これまでMavericksでしたが、マシンが不安定になってきたこととハードディスクの容量を圧迫してきたため、
YosemiteにクリーンインストールしてゼロからMacの環境を構築しました。  &lt;/p&gt;

&lt;p&gt;環境構築するにあたって主に使用するツールは下記になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/technicalpickles/homesick"&gt;homesick&lt;/a&gt;でdotfiles管理&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rcmdnk/homebrew-file"&gt;Brew-file&lt;/a&gt;でhomebrew(+brew-cask)の各種アプリをインストール&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lra/mackup"&gt;Mackup&lt;/a&gt;でdropbox経由でアプリ設定を同期&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brew-fileに関しては、作者の方の紹介エントリがありますのでそちらを参照ください。&lt;br&gt;
&lt;a href="http://rcmdnk.github.io/blog/2014/08/26/computer-mac-homebrew/"&gt;brew-file: Brewfileを扱うbrewallを改名した - rcmdnk’s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いちおうブログに残しますがあくまで個人メモというような形なので、
だいぶ個人の環境に依存してるところがあるかもということをあらかじめ書いておきます。&lt;/p&gt;

&lt;h2 id="1.-セットアップ準備"&gt;1. セットアップ準備&lt;/h2&gt;

&lt;h3 id="ssh公開鍵"&gt;SSH公開鍵&lt;/h3&gt;

&lt;p&gt;githubからセットアップ情報を取得するのでSSH接続するため鍵の作成を行います。&lt;br&gt;
参考: &lt;a href="https://help.github.com/articles/generating-ssh-keys/"&gt;https://help.github.com/articles/generating-ssh-keys/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="作成"&gt;作成&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ssh-keygen -t rsa -C hoge@hoge.com -f ~/.ssh/github_rsa
※passphraseは空でいいので何も入力しないでそのままEnterを押す

$ cat ~/.ssh/github_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys
$ chmod 700 ~/.ssh &amp;amp;&amp;amp; chmod 600 ~/.ssh/authorized_keys
$ echo "IdentityFile ~/.ssh/github_rsa" &amp;gt;&amp;gt; ~/.ssh/config
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="ssh公開鍵をgithubに登録"&gt;SSH公開鍵をgithubに登録&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pbcopy &amp;lt; ~/.ssh/github_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;githubの&lt;a href="https://github.com/settings/ssh"&gt;SSH keys&lt;/a&gt;ページで &lt;strong&gt;Add SSH Key&lt;/strong&gt; ボタンで登録&lt;/p&gt;

&lt;h3 id="xcode関連のインストール"&gt;Xcode関連のインストール&lt;/h3&gt;

&lt;p&gt;この後のdotfiles環境構築するにあたって、
Xcode及びCommand Line Toolsが入っていることが前提となるため事前にインストールします。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xcode-select --install
$ sudo xcodebuild -license
※ `license agreements` が表示されるので `agree` を入力してEnterを押す
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2.-dotfilesをベースに環境構築"&gt;2. dotfilesをベースに環境構築&lt;/h2&gt;

&lt;h3 id="homesickインストール"&gt;homesickインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/technicalpickles/homesick"&gt;homesick&lt;/a&gt;を使ってdotfilesをローカルにクローンします。&lt;br&gt;
&lt;code&gt;homesick clone&lt;/code&gt; は省略形で書くとhttpsで取得してしまうため、明示的にSSH接続で取得してます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo gem install homesick
$ homesick clone git@github.com:yuuki-arc/dotfiles.git
$ homesick symlink dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="brew-fileでアプリの一括インストール"&gt;Brew-fileでアプリの一括インストール&lt;/h3&gt;

&lt;p&gt;homebrewパッケージ管理には&lt;a href="https://github.com/rcmdnk/homebrew-file"&gt;Brew-file&lt;/a&gt;を使っているので、
下記の手順でインストールします。
また、brew-caskのインストール先は個人的に &lt;code&gt;/usr/local/Caskroom&lt;/code&gt; にしたいので、あらかじめexportしておきます。&lt;br&gt;
※homebrewとbrew-caskはBrew-fileのインストールと同時に入るため明示的に入れなくてもOK。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -fsSL https://raw.github.com/rcmdnk/homebrew-file/install/install.sh |sh
$ brew file set_repo -r yuuki-arc/Brewfile
$ export HOMEBREW_CASK_OPTS="--appdir=/Applications --caskroom=/usr/local/Caskroom"
$ brew file update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クリーンインストール後にセットアップしていて気付いたのですが、下記の点に関しては今後の改善材料です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;依存関係でひっかかるアプリがあるのでその都度個別に &lt;code&gt;brew install&lt;/code&gt; しないといけない&lt;/li&gt;
&lt;li&gt;サービスの自動起動設定(※)は個別に行う必要がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="※-サービスの自動起動設定"&gt;※ サービスの自動起動設定&lt;/h4&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ln -sfv /usr/local/opt/mysql55/*.plist ~/Library/LaunchAgents
ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents
ln -sfv /usr/local/opt/memcached/*.plist ~/Library/LaunchAgents
ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="シェルをzshに切り替え"&gt;シェルをzshに切り替え&lt;/h3&gt;

&lt;p&gt;これまでの手順で必要なものは揃ってるので下記のコマンドを入力すればOK。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo sh -c "echo '/usr/local/bin/zsh' &amp;gt;&amp;gt; /etc/shells"
$ cat /etc/shells
$ chsh -s /usr/local/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="3.-mackupでアプリ毎の設定をリストア"&gt;3. Mackupでアプリ毎の設定をリストア&lt;/h2&gt;

&lt;p&gt;アプリ毎に設定している内容を&lt;a href="https://github.com/lra/mackup"&gt;Mackup&lt;/a&gt;を使ってリストアします。
Dropboxで同期しているので、事前にDropboxを起動してローカルに同期しておきます。&lt;br&gt;
※ Mackup管理のファイルがhomesick管理のファイルとバッティングする可能性があることに注意。
（Mackupでどのファイルがリストアされるか、アプリごとに確認しておく）&lt;/p&gt;

&lt;p&gt;Mackupはpipでインストールします。&lt;br&gt;
pipはデフォルトで入っているようです？（ここは最初からなのか、いつの間にか入ったのか曖昧）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dropboxのアプリを起動してローカルにファイルを同期する&lt;/li&gt;
&lt;li&gt;Mackupでリストアする&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install mackup
$ mackup restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;私の場合は、iTerm2の設定もMackupで管理していて、この手順によってiTerm2の設定もリストアされたので、
以降の手順についてはiTerm2を起動して作業します。（単に使いやすさの話で、ターミナルで引き続き作業でも問題無い）&lt;/p&gt;

&lt;h2 id="4.-周辺ツールのインストール"&gt;4. 周辺ツールのインストール&lt;/h2&gt;

&lt;p&gt;git cloneで入れるところ、Brew-fileではうまくいかなかったものをここで入れます。
※Brew-fileでうまくいかなかったのは私の記述の問題かも？&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/amatsuda/gem-src.git ~/.rbenv/plugins/gem-src
$ git clone https://github.com/laprasdrum/phpenv.git ~/.phpenv
$ brew install vim --with-python --with-ruby --with-perl
$ brew cask install --caskroom=/Applications google-chrome
$ brew cask install --caskroom=/Applications firefox-ja
$ brew cask alfred link
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="5.-os-xの環境設定"&gt;5. OS Xの環境設定&lt;/h2&gt;

&lt;p&gt;OS Xの環境設定を行います。&lt;br&gt;
コマンドで設定できる箇所はコマンドで設定していきます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Finder - 隠しファイル表示
defaults write com.apple.finder AppleShowAllFiles -bool yes
# Finder - タイトルをフルパス表示
defaults write com.apple.finder _FXShowPosixPathInTitle -bool yes
# QuickLook - 閲覧中ファイルの文字列を選択コピー可能に
defaults write com.apple.finder QLEnableTextSelection -bool yes

killall Finder

# Dock - MissonControlのアニメーションスピードを速く
defaults write com.apple.dock expose-animation-duration -float 0.15
# Dock - スペース表示高速化
defaults write com.apple.dock workspaces-swoosh-animation-off -bool yes
#  ダッシュボードを無効化
defaults write com.apple.dashboard mcx-disabled -bool yes
## アプリ隠しをDock上で半透明で表現
defaults write com.apple.Dock showhidden -bool yes

killall Dock

# マウスの速度を変える
defaults write .GlobalPreferences com.apple.trackpad.scaling 5

# ネットワーク接続時の.DS_Store作成を抑制
defaults write com.apple.desktopservices DSDontWriteNetworkStores true

# 保存ダイアログを常に展開状態にする
defaults write -g NSNavPanelExpandedStateForSaveMode -bool yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記以外の箇所は下記エントリのように設定しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/2012/01/08/setup-mac-system/"&gt;MacBook Proを購入して最初にやること - システム環境設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/2012/01/08/setup-mac-finder/"&gt;MacBook Proを購入して最初にやること - Finder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="6.-その他の設定"&gt;6. その他の設定&lt;/h2&gt;

&lt;p&gt;その他、下記のような内容を設定しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アンチウィルスソフト（これは &lt;strong&gt;1. セットアップ準備&lt;/strong&gt; の前にインストール）&lt;/li&gt;
&lt;li&gt;有料ツールのライセンス情報を入力&lt;/li&gt;
&lt;li&gt;Microsoft Officeなどの個別にインストールするツール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも使っていくうちに設定しないといけないものがでてくるとは思いますが、ひとまずこんな感じで。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>「みくもバースト！」アプリ制作のこと</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2014/12/19/apps-release-mikumo-burst/"/>
    <id>http://yuukiar.co/blog/2014/12/19/apps-release-mikumo-burst/</id>
    <published>2014-12-19T08:30:00+09:00</published>
    <updated>2015-05-31T22:18:34+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;ゲームアプリ「みくもバースト！」をリリースしました！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="/apps/mikumo-burst/"&gt;タップ連打系バトルゲーム「みくもバースト！」&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="みくもバースト！" src="/img/2014-12-19/header.png" /&gt;&lt;/p&gt;

&lt;p&gt;19日現在、ストアにあがってるのはAndroid版のみですが、
iOS版も申請中なので近々iOSでもプレイできるようになると思います。&lt;/p&gt;

&lt;p&gt;ここでは、アプリをリリースするまでに至るいろいろを思いつくまま書きました。
ただ、まだ完成ではなくて今後も段階リリースしていくのでこれらの制作秘話は現在進行形です、
というところだけ付け足しておきますよ〜。&lt;/p&gt;

&lt;p&gt;このブログの記事にしてはだいぶテキストも長いので、
適当に流し読みしながら気になったところだけピックアップして読んでもらっても構わないです！&lt;/p&gt;

&lt;h2 id="見出し"&gt;見出し&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#「みくもバースト！」について"&gt;「みくもバースト！」について&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#アイデア"&gt;アイデア&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#キャラクター"&gt;キャラクター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#キャラクター強化要素"&gt;キャラクター強化要素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1バトル10秒"&gt;1バトル10秒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#攻撃してこないモンスター"&gt;攻撃してこないモンスター&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ボスとのバトルモード"&gt;ボスとのバトルモード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ゲーム仕様とゲームバランス"&gt;ゲーム仕様とゲームバランス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#タイトル"&gt;タイトル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#開発について"&gt;開発について&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ゲームアプリ開発"&gt;ゲームアプリ開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#開発期間"&gt;開発期間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#素材選び"&gt;素材選び&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#使用言語"&gt;使用言語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#開発ツール"&gt;開発ツール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#AppC"&gt;AppC cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#導入した技術・仕組み"&gt;導入した技術・仕組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#githubに公開"&gt;githubに公開&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="「みくもバースト！」について"&gt;「みくもバースト！」について&lt;/h2&gt;

&lt;h3 id="アイデア"&gt;アイデア&lt;/h3&gt;

&lt;p&gt;短時間で簡単に遊べるゲームを作りたいなと思って、このゲームを作りました。
イメージはこのはちゃんがツイートしてたのがまさにそうでしたｗ&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="ja" data-conversation="none"&gt;&lt;p&gt;&lt;a href="https://twitter.com/yuuki_arc"&gt;@yuuki_arc&lt;/a&gt; &lt;a href="https://twitter.com/MikumoAnzu"&gt;@MikumoAnzu&lt;/a&gt; 高橋名人にやってもらいたい。&lt;/p&gt;&amp;mdash; 美雲このは (@MikumoConoHa) &lt;a href="https://twitter.com/MikumoConoHa/status/544336718929739776"&gt;2014, 12月 15&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;高橋名人の16連射というものがあり、そこから膨らませて、
スマホのゲームで連打系のゲーム作ってみたらおもしろいかなーというのがもともとの発想です。&lt;/p&gt;

&lt;h3 id="キャラクター"&gt;キャラクター&lt;/h3&gt;

&lt;p&gt;当初、フリー素材のキャラクターを使ってアプリを作っていました。
そんな中、ふとしたきっかけで&lt;a href="pronama.github.io/mascot-apps-contest/2014/"&gt;マスコットアプリ文化祭&lt;/a&gt;なるものを知って、
提出期限までには完成できそうかなーという感触があったので応募してみることにしました。
（実際は、最初にも書いたように現在進行形で開発してるので無理やり完成に持っていった、というところです…）&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2014-12-19/anco2.png" class="float-right-img"&gt;
キャラクター選択についてはとくに迷うことなく、
それなりに知っていて馴染みのあった「&lt;a href="https://twitter.com/MikumoConoHa"&gt;美雲このは&lt;/a&gt;」と「&lt;a href="https://twitter.com/MikumoAnzu"&gt;美雲あんず&lt;/a&gt;」にしました。
キャラクターの性格付けは悩みどころだったので助かりましたねー。
さらに、そこから想像してゲームの世界観やストーリーも比較的容易に膨らませて展開していけたのもよかったです。&lt;/p&gt;

&lt;p&gt;また、もともと1人キャラのゲームだったところを、このは＆あんずのダブルヒロインに切り替えたので、
ユーザーとしてはキャラ選択の楽しみが増えたことと、ゲーム的にも幅が広がったかなと思います。&lt;/p&gt;

&lt;h3 id="キャラクター強化要素"&gt;キャラクター強化要素&lt;/h3&gt;

&lt;p&gt;&lt;img src="/img/2014-12-19/scene_select.png" class="float-right-img"&gt;
キャラクター強化要素というか育成要素についても、ランクアップするだけですが組み込んでます。
純粋にゲームがおもしろければそういう要素がなくてもスコアアタックだけでいいと思いますが、
このアプリに関してはゲーム性はないようなものなので、
別の部分でおもしろくなるような仕組みを考えないと何回もプレイしてもらえないなと。
ちょうど、このは＆あんずという個性的なキャラクターを使うことにしたのもあって、
キャラクターが強くなることでより愛着が湧いて複数回プレイしてくれるかなという気持ちもありました。&lt;/p&gt;

&lt;h3 id="1バトル10秒"&gt;1バトル10秒&lt;/h3&gt;

&lt;p&gt;最初は1分ぐらいのゲーム時間にしてたんですが、やってみたら1分は長すぎるなと感じたので、
思い切って10秒にしてます。
たぶん、どこの誰かもわからない作者のゲームで1分もプレイしないかなと思ったのと、
1回やったとしても2回、3回とやらないだろうなと思ったので1回のゲーム時間はそのぐらいに縮めました。
まぁ単純にタップするだけのゲームだから、というのもあります。&lt;/p&gt;

&lt;h3 id="攻撃してこないモンスター"&gt;攻撃してこないモンスター&lt;/h3&gt;

&lt;p&gt;ぜんぜん攻撃してこないのは、攻撃されることによるプレイヤーへのストレスだったり
ゲームバランスの複雑性を回避したかったからです。
そのため、敵はぜんぜん攻撃してくることはなく、このはとあんずが一方的に攻撃する内容になってますが…ｗ&lt;br&gt;
まぁ、ゲームの雰囲気として、明るいライトなバトルゲームという位置づけになってると思ってるので、
これでもいいかなーと思ってます。&lt;/p&gt;

&lt;h3 id="ボスとのバトルモード"&gt;ボスとのバトルモード&lt;/h3&gt;

&lt;p&gt;&lt;img src="/img/2014-12-19/scene_battle_boss.png" class="float-right-img"&gt;
ボスとのバトルは初っ端からできますが、このボスはどうやっても倒せないです。
（今のところどこにもそういう説明は書いてないので、ランク上げれば倒せると思ってたらすみません…）&lt;/p&gt;

&lt;p&gt;ボスバトルの位置づけとして、今時点の話で書くとエンドレスモードというかスコアアタックのために用意しています。
通常バトルだと10秒かからずに倒せてしまうので、フルタイムで戦ったときのスコアがでないんですよね。
なので、フルタイムでのスコアアタックモードがほしくて用意しました。&lt;/p&gt;

&lt;p&gt;そもそもの話をすると、ストーリーの一部としてボスバトルは組み込もうと思ってたので、
スコアアタックとかも考えてなかったんですけど、そこは提出期限の兼ね合いというか…。
必要なモードが開発できてない中で、どういうところでユーザーに楽しんでもらえるゲームアプリとして成立させるか、
という落とし所を考えた結果でてきたモードでした。
ストーリーモードを今後導入するので、そのときにどういう扱いにするかは考え中です。&lt;/p&gt;

&lt;h2 id="ゲーム仕様とゲームバランス"&gt;ゲーム仕様とゲームバランス&lt;/h2&gt;

&lt;p&gt;ゲームの仕様は何回も変更を入れていて、
バーストモードの仕様であったりバトルリザルトに表示する要素であったり、
作っては変えてという感じで試行錯誤してました。
最初にきちんとゲーム設計してればもっと効率よく進められたのかも。&lt;/p&gt;

&lt;p&gt;ゲームバランスは今も試行錯誤してますが、
方針としてはライトユーザー向けの短時間で遊べるゲームにしてます。
ストーリーモードやキャラクター強化は最初つける予定はなかったのですが、
せっかくダウンロードして遊んでもらうので、
それなりに継続要素はあったほうがいいだろうなと思ってつける方針に変更してます。&lt;/p&gt;

&lt;h3 id="タイトル"&gt;タイトル&lt;/h3&gt;

&lt;p&gt;&lt;img src="/img/2014-12-19/title_logo.png" class="float-right-img"&gt;
最初はまったく別のタイトルにしてましたが、
このは＆あんず仕様にしたのでなるべく簡単でスッと入りやすい単語にしました。
「みくも」の部分は「このは＆あんず」にするか「あんこ」にするかどうしようか色々考えましたが、
&lt;a href="http://みくも.com"&gt;みくも.com&lt;/a&gt; があるし「みくも」でも一般的に通じるかなーと思って決めてます。
「バースト」の部分は「連打」を連想させるような簡単で短い（最長5発音程度）の英単語をと思いましたが、
これだ！というのがひねり出せなかったので、感覚的に違和感がないような、連打を連想できそうな英単語にしました。
感嘆符は連打してる勢いをタイトルに出すためで「バースト」よりは「バースト！」かなという感じです。&lt;/p&gt;

&lt;h2 id="開発について"&gt;開発について&lt;/h2&gt;

&lt;h3 id="ゲームアプリ開発"&gt;ゲームアプリ開発&lt;/h3&gt;

&lt;p&gt;きちんと一般公開にまでこぎつけたアプリとしては今回のアプリが初めてです。
だいぶ前にCocos2d-iPhoneだったり、最近だとUnity3Dでコード組んでみたりはしてるんですが、
明確なゴールというかこういうゲームアプリがつくりたい！というのがないまま作ってるので、
だいたい途中で放置したままになってます。
なので、今回リリースできてひとまずホッとしてます…。&lt;/p&gt;

&lt;h3 id="開発期間"&gt;開発期間&lt;/h3&gt;

&lt;p&gt;個人制作でトータル4ヶ月ぐらい。
最初の1ヶ月は結果的にCocos2d-xに慣れる期間という感じだったので、
今の仕様のベースを作り始めてからどのくらいか考えると3ヶ月ぐらいです。
平日ちまちまやりつつ、土日の休日でがっつり時間使って作ってました。
コワーキングスペースにはとてもお世話になりました。&lt;/p&gt;

&lt;h3 id="素材選び"&gt;素材選び&lt;/h3&gt;

&lt;p&gt;地味に時間がかかったのが各種素材選びでした。
プログラミングしかできるものがないので、
背景やキャラクター画像、音楽、効果音などの素材はいろいろ見て回ってお借りしました。
1回見ただけだと、ゲームの雰囲気に合ってるかいまいちぴんとこない事が多く、
何回も何日も同じ素材サイトを見たり聴いたりしては悩んでたと思います。
さらに、このは＆あんずのキャラクターに切り替えたことでゲーム全体の雰囲気もだいぶ変わったので、
そのときも再度、素材を選びなおしました。
こういう部分は個人制作だとしかたないのかなと思いつつ、
ディレクター、デザイナーがいたら楽なんだろうなと思ってます。&lt;/p&gt;

&lt;h3 id="使用言語"&gt;使用言語&lt;/h3&gt;

&lt;p&gt;Macのマシンで、Cocos2d-x 3.2で開発してます。
作り始めたときはまだ3.2が出たばかりで2.x系の情報が多かったんですが、
近いうちに3.x系が主流になるのは明らかだったので最新版で作り始めました。
参考にした2.x系のコードが3.x系になると動かなくなるといったこともありましたが、
そのあたりのバージョンによる差異は最初の1ヶ月間で吸収できたように思います。&lt;/p&gt;

&lt;h3 id="開発ツール"&gt;開発ツール&lt;/h3&gt;

&lt;p&gt;以下のツールを使って開発してます。&lt;/p&gt;

&lt;h4 id="cocosbuilder"&gt;CocosBuilder&lt;/h4&gt;

&lt;p&gt;画面(Scene)ごとのベースレイアウトで使ってます。
多機能でアニメーションをつけられたり色々できるようですが、
そういうことは一切ふれてなく、単純にレイアウトのみで使いました。
設定で解像度対応も自動的にしてくれるし、GUIで画像パーツを配置できる優れたツールです。
最近だとCocos Studioがでてきていますが、
開発し始めた頃はバグだらけでとても使える状態じゃなかったためCocosBuilderを選択しています。
今のCocos Studioが正式使用に耐えられる完成度かはわかりませんが、また次回新しいゲームアプリを作るときに試してみようと思います。&lt;/p&gt;

&lt;h4 id="texturepacker"&gt;TexturePacker&lt;/h4&gt;

&lt;p&gt;下記の記事にあるように無料ライセンスを手に入れてフル活用してました。&lt;br&gt;
&lt;a href="/blog/2014/09/07/request-free-license-texture-packer-physics-editor/"&gt;TexturePackerとPhysicsEditorの無料ライセンスを取得する方法&lt;/a&gt;&lt;br&gt;
少し設定しておけばあとは毎回、自動的に解像度のHD/SD用出力をしてくれるし、
作りこんでいくとテクスチャアトラスの使用有無が作業効率に大きく影響してくるので、
非常に役に立つツールでした。&lt;/p&gt;

&lt;h4 id="glyph-designer"&gt;Glyph Designer&lt;/h4&gt;

&lt;p&gt;これは下記のように半額で購入したものを使ってます。&lt;br&gt;
&lt;a href="/blog/2014/08/26/discount-50-percent-particle-designer-and-glyph-designer/"&gt;Particle Designer／Glyph Designerがセール中！8月31日まで50％OFF！&lt;/a&gt;&lt;br&gt;
今回のゲーム内の文字はすべて、このGlyph Designerで画像化した文字フォントを使っています。
個人的にゲームアプリ開発では必須です。&lt;/p&gt;

&lt;h4 id="particle-designer"&gt;Particle Designer&lt;/h4&gt;

&lt;p&gt;これもGlyph Designer同様、半額で購入したものです。
いまいち使いきれませんでしたが、いちおうタイトル画面で使ってます。
動作が重くなるのでバトル画面で使うのを躊躇して使いませんでしたが、パラメータや何かの設定次第なのかも。&lt;/p&gt;

&lt;h3 id="appc-cloud"&gt;AppC cloud&lt;/h3&gt;

&lt;p&gt;下記サイトのMBaaSです。&lt;br&gt;
&lt;a href="https://app-c.net/"&gt;https://app-c.net/&lt;/a&gt;&lt;br&gt;
ランキング機能と広告機能で利用させていただきました。
サイトに登録してAppC cloud SDKを組み込むことで、
容易にAndroid及びiOSで共通の機能を実装できる優れたサービスです。
Cocos2d-x 3.x系のSDKもあります。
今回は利用機会がありませんでしたが、アプリ内課金などの仕組みも簡単に実装できるようです。&lt;/p&gt;

&lt;h3 id="導入した技術・仕組み"&gt;導入した技術・仕組み&lt;/h3&gt;

&lt;p&gt;他、思いつくものを箇条書きで。（すみません、書くのに力尽きました）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テクスチャアトラス&lt;/li&gt;
&lt;li&gt;フォント画像化&lt;/li&gt;
&lt;li&gt;解像度対応（iPhone6plus対応）&lt;/li&gt;
&lt;li&gt;スクリプトでapk,ipa生成〜DeployGate自動配信&lt;/li&gt;
&lt;li&gt;共通ライブラリをスタティックライブラリ化&lt;/li&gt;
&lt;li&gt;ネイティブ連携でツイート＆レビュー機能&lt;/li&gt;
&lt;li&gt;Google Analytics&lt;/li&gt;
&lt;li&gt;PicoJson（データをシリアライズ化して保持）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="githubに公開"&gt;githubに公開&lt;/h3&gt;

&lt;p&gt;コードはgithubに公開しています。
公開できないパラメータなどもありますので、
そのままでは動きませんが、まぁなにか参考にしていただければ。
&lt;a href="https://github.com/yuuki-arc/mikumo-burst"&gt;https://github.com/yuuki-arc/mikumo-burst&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>TexturePackerとPhysicsEditorの無料ライセンスを取得する方法</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2014/09/07/request-free-license-texture-packer-physics-editor/"/>
    <id>http://yuukiar.co/blog/2014/09/07/request-free-license-texture-packer-physics-editor/</id>
    <published>2014-09-07T15:20:00+09:00</published>
    <updated>2015-05-22T00:14:19+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;Cocos2d-xやUnity3Dのゲーム開発支援ツールとして有名なTexturePackerとPhysicsEditorがあります。&lt;br&gt;
TexturePackerは複数の画像ファイルを一つの画像にまとめてテクスチャアトラスを生成してくれるツールで、
PhsycisEditorは物理エンジン用のシェイプを作成できるツールです。&lt;/p&gt;

&lt;p&gt;&lt;img alt="TexturePacker" src="/img/2014-09-07/2014_09_07_2-texture-packer.png" /&gt;&lt;/p&gt;

&lt;p&gt;これらのツールは本来有料でライセンスを購入しないとフルに活用することができませんが、
ある条件を満たすことで無料で1年間のライセンスを取得して使うことができます。&lt;/p&gt;

&lt;p&gt;詳細は以下のページをご覧ください。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeandweb.com/request-free-license"&gt;Request a free license - CodeAndWeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このページに条件が書いてあり、その条件を抜粋します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bloggers and framework developers can get a free 1-year-license for my tools.&lt;/p&gt;

&lt;p&gt;My requirements to you are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write your own blog about game/software/web development or about applications&lt;/li&gt;
&lt;li&gt;Your blog has at least 5 recent relevant entries which are

&lt;ul&gt;
&lt;li&gt;about a page long and&lt;/li&gt;
&lt;li&gt;not older than 6 months&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Facebook, Twitter, Tumblr or Weibo are not blogs - unless you have 100.000 friends ;-)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would be happy if you do a small blog post about my tools in return - but this is not a requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要約すると以下の意味合いのようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ブログを書いていて、ゲーム／ソフトウェア／Web開発、アプリケーションに関するブログであること&lt;/li&gt;
&lt;li&gt;1ページの分量でかつ6ヶ月以上経っていない、直近5つの記事を書いていること&lt;/li&gt;
&lt;li&gt;Facebook, Twitter, Tumblr, Weiboは10万人の友人がいなければブログではない&lt;/li&gt;
&lt;li&gt;TexturePacker, PhysicsEditorに関する記事を書いてくれると幸せになるかも（これは必須ではない）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1つめ2つめの内容だけでもライセンスもらえるようですが、4つめの内容からするとツールに関する記事を書くとなお良さそうです。&lt;br&gt;
（3つめのFacebookうんぬんは、逆にとらえると10万人いればブログとして認めるよ、ってことかな？）&lt;/p&gt;

&lt;p&gt;ということで、私もリクエストしてみました。
どうなるかなー。&lt;/p&gt;

&lt;h2 id="2014-09-08-追記"&gt;2014-09-08 追記&lt;/h2&gt;

&lt;p&gt;本日の17:35に &lt;strong&gt;Your free license request for TexturePacker and PhysicsEditor&lt;/strong&gt; というタイトルでフリーライセンスのメールが送られてきてました
！
リクエストページからリクエストを出してから1〜2日ぐらいで返信があるようですね。&lt;br&gt;
これで1年間、制限なくツールを使えるようになりましたのでアプリ開発で使い倒していきたいと思います！&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>VirtualBoxで仮想Mac OS X(Mavericks)環境を構築する</title>
    <link rel="alternate" href="http://yuukiar.co/blog/2014/09/07/mac-os-x-mavericks-in-virtualbox/"/>
    <id>http://yuukiar.co/blog/2014/09/07/mac-os-x-mavericks-in-virtualbox/</id>
    <published>2014-09-07T12:35:00+09:00</published>
    <updated>2015-04-04T21:23:11+09:00</updated>
    <author>
      <name>yuuki-arc</name>
    </author>
    <content type="html">&lt;p&gt;Mac OS Xで動作するVirtualBoxで、さらにMac OS Xの仮想環境を構築しようという内容です。&lt;br&gt;
試したのは2〜3ヶ月前ですが今でも問題なく作れるはず。&lt;/p&gt;

&lt;p&gt;仮想環境を構築するためにはiESDというツールを使います。
作者の方のページに環境構築方法も書いてましたのでそのまま参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ntk.me/2012/09/07/os-x-on-os-x/"&gt;OS X on OS X - 夏樹の時間&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="1.-os-x-mavericksのインストーラをダウンロード"&gt;1. OS X Mavericksのインストーラをダウンロード&lt;/h2&gt;

&lt;p&gt;App StoreからMavericksをダウンロードします。&lt;br&gt;
インストール中に作られるファイルを使うので、すでにMavericksの人も同じようにダウンロードしてください。&lt;/p&gt;

&lt;p&gt;ダウンロードするとアプリケーションフォルダに &lt;strong&gt;OS X Mavericks インストール.app&lt;/strong&gt; が作られます。
このとき、同時にインストーラが立ち上がりますがキャンセルしてください。&lt;/p&gt;

&lt;h2 id="2.-virtualbox用のos-x-mavericksイメージを作成"&gt;2. VirtualBox用のOS X Mavericksイメージを作成&lt;/h2&gt;

&lt;p&gt;下記のコマンドを実行します。&lt;br&gt;
カレントディレクトリに Mavericks.dmg が作られます。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem install iesd
$ iesd -i /Applications/Install\ OS\ X\ Mavericks.app -o Mavericks.dmg -t BaseSystem
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="マシンによっては必要な手順"&gt;マシンによっては必要な手順&lt;/h3&gt;

&lt;h4 id="intel-haswell-cpu-(macs-after-2013)-の場合"&gt;&lt;em&gt;Intel Haswell CPU (Macs after 2013)&lt;/em&gt; の場合&lt;/h4&gt;

&lt;p&gt;下記のコマンドが必要になります。
私のMacは対象だったのでこのコマンドを実行しました。&lt;br&gt;
※ &amp;ldquo;Mac OS X Mavericks&amp;rdquo; の箇所は、環境によって異なるかもしれませんが &lt;em&gt;&amp;lt;vmname&amp;gt;&lt;/em&gt; が入ります。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ VBoxManage modifyvm "Mac OS X Mavericks" --cpuidset 00000001 000306a9 00020800 80000201 178bfbff
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="mac-pro-early-2009-または-ecc-memory搭載-のmacの場合"&gt;&lt;em&gt;Mac Pro Early 2009&lt;/em&gt; または &lt;em&gt;ECC memory搭載&lt;/em&gt; のMacの場合&lt;/h4&gt;

&lt;p&gt;iesd実行時に &lt;code&gt;--uninstall-extension&lt;/code&gt; のオプションも合わせて指定する必要があるようです。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ iesd -i /Applications/Install\ OS\ X\ Mavericks.app -o Mavericks.dmg -t BaseSystem --uninstall-extension AppleTyMCEDriver.kext
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="3.-virtualboxで新規vmを作成"&gt;3. VirtualBoxで新規VMを作成&lt;/h2&gt;

&lt;p&gt;VirtualBoxを起動して新規にVMを作成します。
私の場合は以下の様な設定にしました。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2014-09-07/2014_09_07_1-virtualbox-settings.png" /&gt;&lt;/p&gt;

&lt;h2 id="4.-mavericksを仮想環境でインストール"&gt;4. Mavericksを仮想環境でインストール&lt;/h2&gt;

&lt;p&gt;作成したVMを起動して、Mavericks.dmgをセットします。&lt;br&gt;
OS X インストーラが起動したら、まずはディスクフォーマットを行います。
ディスクフォーマットは以下の手順で行います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;画面上部のメニューバーから[ユーティリティ]を選択する&lt;/li&gt;
&lt;li&gt;[ディスクユーテリィティ&amp;hellip;]を選択する&lt;/li&gt;
&lt;li&gt;ダイアログが表示された後、左のリストからディスクを選択する&lt;/li&gt;
&lt;li&gt;[消去]タブを選択する&lt;/li&gt;
&lt;li&gt;フォーマットを[Mac OS 拡張 (ジャーナリング)]にして[消去]ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでディスクがフォーマットされます。&lt;br&gt;
フォーマットが完了したらディスクユーティリティを終了して、インストーラの続きを行います。&lt;/p&gt;

&lt;p&gt;その後は、指示の通りインストールを行っていきます。&lt;br&gt;
一度再起動するタイミングがありますが、そのときにDVD仮想ドライブからディスクを取り出してください。&lt;br&gt;
そのまま起動すればインストール完了です。&lt;/p&gt;

&lt;p&gt;これで、Mac OS XのVirtualBoxの中で、Mac OS X Mavericksが使えるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src="/img/2014-09-07/2014_09_07_1-after-install.png" /&gt;&lt;/p&gt;

&lt;p&gt;ただ、実際に起動して使用した感想ですが……レスポンスはあまりよくないです。
とくにグラフィック回りが顕著で、ワンテンポ、ツーテンポぐらい遅れて反応する感覚です。&lt;br&gt;
メモリを増やしたりCPUのコア数を増やしたりしてみましたが、改善は見られなかったので何らかの用途で使うにも忍耐がいるかもしれません。&lt;/p&gt;
</content>
  </entry>
</feed>
